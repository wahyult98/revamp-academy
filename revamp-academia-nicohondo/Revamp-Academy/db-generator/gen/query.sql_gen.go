// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: query.sql

package models

import (
	"context"
	"database/sql"
	"time"

	// "github.com/tabbed/pqtype"
)

const createAddrees = `-- name: CreateAddrees :one

INSERT INTO users.users_address
(etad_addr_id, etad_modified_date, etad_entity_id, etad_adty_id)
VALUES($1,$2,$3,$4)
RETURNING etad_addr_id
`

type CreateAddreesParams struct {
	EtadAddrID       int32         `db:"etad_addr_id" json:"etadAddrId"`
	EtadModifiedDate sql.NullTime  `db:"etad_modified_date" json:"etadModifiedDate"`
	EtadEntityID     sql.NullInt32 `db:"etad_entity_id" json:"etadEntityId"`
	EtadAdtyID       sql.NullInt32 `db:"etad_adty_id" json:"etadAdtyId"`
}

func (q *Queries) CreateAddrees(ctx context.Context, arg CreateAddreesParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createAddrees,
		arg.EtadAddrID,
		arg.EtadModifiedDate,
		arg.EtadEntityID,
		arg.EtadAdtyID,
	)
	var etad_addr_id int32
	err := row.Scan(&etad_addr_id)
	return etad_addr_id, err
}

const createBatch = `-- name: CreateBatch :one
INSERT INTO bootcamp.batch
(batch_id, batch_entity_id, batch_name, batch_description, batch_start_date, batch_end_date, batch_reason, batch_type, batch_modified_date, batch_status, batch_pic_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING batch_id
`

type CreateBatchParams struct {
	BatchID           int32          `db:"batch_id" json:"batchId"`
	BatchEntityID     int32          `db:"batch_entity_id" json:"batchEntityId"`
	BatchName         sql.NullString `db:"batch_name" json:"batchName"`
	BatchDescription  sql.NullString `db:"batch_description" json:"batchDescription"`
	BatchStartDate    sql.NullTime   `db:"batch_start_date" json:"batchStartDate"`
	BatchEndDate      sql.NullTime   `db:"batch_end_date" json:"batchEndDate"`
	BatchReason       sql.NullString `db:"batch_reason" json:"batchReason"`
	BatchType         sql.NullString `db:"batch_type" json:"batchType"`
	BatchModifiedDate sql.NullTime   `db:"batch_modified_date" json:"batchModifiedDate"`
	BatchStatus       sql.NullString `db:"batch_status" json:"batchStatus"`
	BatchPicID        sql.NullInt32  `db:"batch_pic_id" json:"batchPicId"`
}

func (q *Queries) CreateBatch(ctx context.Context, arg CreateBatchParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createBatch,
		arg.BatchID,
		arg.BatchEntityID,
		arg.BatchName,
		arg.BatchDescription,
		arg.BatchStartDate,
		arg.BatchEndDate,
		arg.BatchReason,
		arg.BatchType,
		arg.BatchModifiedDate,
		arg.BatchStatus,
		arg.BatchPicID,
	)
	var batch_id int32
	err := row.Scan(&batch_id)
	return batch_id, err
}

const createBatchTrainee = `-- name: CreateBatchTrainee :one
INSERT INTO bootcamp.batch_trainee
(batr_id, batr_status, batr_certificated, batre_certificate_link, batr_access_token, batr_access_grant, batr_review, batr_total_score, batr_modified_date, batr_trainee_entity_id, batr_batch_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING batr_id
`

type CreateBatchTraineeParams struct {
	BatrID               int32          `db:"batr_id" json:"batrId"`
	BatrStatus           sql.NullString `db:"batr_status" json:"batrStatus"`
	BatrCertificated     sql.NullString `db:"batr_certificated" json:"batrCertificated"`
	BatreCertificateLink sql.NullString `db:"batre_certificate_link" json:"batreCertificateLink"`
	BatrAccessToken      sql.NullString `db:"batr_access_token" json:"batrAccessToken"`
	BatrAccessGrant      sql.NullString `db:"batr_access_grant" json:"batrAccessGrant"`
	BatrReview           sql.NullString `db:"batr_review" json:"batrReview"`
	BatrTotalScore       sql.NullInt32  `db:"batr_total_score" json:"batrTotalScore"`
	BatrModifiedDate     sql.NullTime   `db:"batr_modified_date" json:"batrModifiedDate"`
	BatrTraineeEntityID  sql.NullInt32  `db:"batr_trainee_entity_id" json:"batrTraineeEntityId"`
	BatrBatchID          int32          `db:"batr_batch_id" json:"batrBatchId"`
}

func (q *Queries) CreateBatchTrainee(ctx context.Context, arg CreateBatchTraineeParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createBatchTrainee,
		arg.BatrID,
		arg.BatrStatus,
		arg.BatrCertificated,
		arg.BatreCertificateLink,
		arg.BatrAccessToken,
		arg.BatrAccessGrant,
		arg.BatrReview,
		arg.BatrTotalScore,
		arg.BatrModifiedDate,
		arg.BatrTraineeEntityID,
		arg.BatrBatchID,
	)
	var batr_id int32
	err := row.Scan(&batr_id)
	return batr_id, err
}

const createBatchTraineeEvaluation = `-- name: CreateBatchTraineeEvaluation :one
INSERT INTO bootcamp.batch_trainee_evaluation
(btev_id, btev_type, btev_header, btev_section, btev_skill, btev_week, btev_skor, btev_note, btev_modified_date, btev_batch_id, btev_trainee_entity_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING btev_id
`

type CreateBatchTraineeEvaluationParams struct {
	BtevID              int32          `db:"btev_id" json:"btevId"`
	BtevType            sql.NullString `db:"btev_type" json:"btevType"`
	BtevHeader          sql.NullString `db:"btev_header" json:"btevHeader"`
	BtevSection         sql.NullString `db:"btev_section" json:"btevSection"`
	BtevSkill           sql.NullString `db:"btev_skill" json:"btevSkill"`
	BtevWeek            sql.NullInt32  `db:"btev_week" json:"btevWeek"`
	BtevSkor            sql.NullInt32  `db:"btev_skor" json:"btevSkor"`
	BtevNote            sql.NullString `db:"btev_note" json:"btevNote"`
	BtevModifiedDate    sql.NullTime   `db:"btev_modified_date" json:"btevModifiedDate"`
	BtevBatchID         sql.NullInt32  `db:"btev_batch_id" json:"btevBatchId"`
	BtevTraineeEntityID sql.NullInt32  `db:"btev_trainee_entity_id" json:"btevTraineeEntityId"`
}

func (q *Queries) CreateBatchTraineeEvaluation(ctx context.Context, arg CreateBatchTraineeEvaluationParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createBatchTraineeEvaluation,
		arg.BtevID,
		arg.BtevType,
		arg.BtevHeader,
		arg.BtevSection,
		arg.BtevSkill,
		arg.BtevWeek,
		arg.BtevSkor,
		arg.BtevNote,
		arg.BtevModifiedDate,
		arg.BtevBatchID,
		arg.BtevTraineeEntityID,
	)
	var btev_id int32
	err := row.Scan(&btev_id)
	return btev_id, err
}

const createBusinessEntity = `-- name: CreateBusinessEntity :one
INSERT INTO users.business_entity 
(entity_id)
VALUES($1)
RETURNING entity_id
`

func (q *Queries) CreateBusinessEntity(ctx context.Context, entityID int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, createBusinessEntity, entityID)
	var entity_id int32
	err := row.Scan(&entity_id)
	return entity_id, err
}

const createCartItems = `-- name: CreateCartItems :one
INSERT INTO sales.cart_items(cait_id, cait_quantity, cait_unit_price, cait_modified_date,cait_user_entity_id,cait_prog_entity_id) VALUES ($1, $2, $3, $4, $5, $6)
RETURNING cait_id
`

type CreateCartItemsParams struct {
	CaitID           int32          `db:"cait_id" json:"caitId"`
	CaitQuantity     sql.NullInt32  `db:"cait_quantity" json:"caitQuantity"`
	CaitUnitPrice    sql.NullString `db:"cait_unit_price" json:"caitUnitPrice"`
	CaitModifiedDate sql.NullTime   `db:"cait_modified_date" json:"caitModifiedDate"`
	CaitUserEntityID sql.NullInt32  `db:"cait_user_entity_id" json:"caitUserEntityId"`
	CaitProgEntityID sql.NullInt32  `db:"cait_prog_entity_id" json:"caitProgEntityId"`
}

func (q *Queries) CreateCartItems(ctx context.Context, arg CreateCartItemsParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createCartItems,
		arg.CaitID,
		arg.CaitQuantity,
		arg.CaitUnitPrice,
		arg.CaitModifiedDate,
		arg.CaitUserEntityID,
		arg.CaitProgEntityID,
	)
	var cait_id int32
	err := row.Scan(&cait_id)
	return cait_id, err
}

const createCategory = `-- name: CreateCategory :one

INSERT INTO jobHire.job_category(joca_id, joca_name, joca_modified_date) VALUES ($1, $2, $3)
RETURNING joca_id
`

type CreateCategoryParams struct {
	JocaID           int32          `db:"joca_id" json:"jocaId"`
	JocaName         sql.NullString `db:"joca_name" json:"jocaName"`
	JocaModifiedDate sql.NullTime   `db:"joca_modified_date" json:"jocaModifiedDate"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createCategory, arg.JocaID, arg.JocaName, arg.JocaModifiedDate)
	var joca_id int32
	err := row.Scan(&joca_id)
	return joca_id, err
}

const createClient = `-- name: CreateClient :one

INSERT INTO jobHire.client(clit_id, clit_name, clit_about, clit_modified_date, clit_addr_id, clit_emra_id) VALUES ($1, $2, $3, $4, $5, $6)
RETURNING clit_id
`

type CreateClientParams struct {
	ClitID           int32          `db:"clit_id" json:"clitId"`
	ClitName         sql.NullString `db:"clit_name" json:"clitName"`
	ClitAbout        sql.NullString `db:"clit_about" json:"clitAbout"`
	ClitModifiedDate sql.NullTime   `db:"clit_modified_date" json:"clitModifiedDate"`
	ClitAddrID       sql.NullInt32  `db:"clit_addr_id" json:"clitAddrId"`
	ClitEmraID       sql.NullInt32  `db:"clit_emra_id" json:"clitEmraId"`
}

func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createClient,
		arg.ClitID,
		arg.ClitName,
		arg.ClitAbout,
		arg.ClitModifiedDate,
		arg.ClitAddrID,
		arg.ClitEmraID,
	)
	var clit_id int32
	err := row.Scan(&clit_id)
	return clit_id, err
}

const createClientContract = `-- name: CreateClientContract :one

INSERT INTO hr.employee_client_contract (ecco_id, ecco_entity_id, ecco_contract_no, ecco_contract_date, ecco_start_date, ecco_end_date, ecco_notes, ecco_modified_date, ecco_media_link, ecco_joty_id, ecco_account_manager, ecco_clit_id, ecco_status) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)
RETURNING ecco_id
`

type CreateClientContractParams struct {
	EccoID             int32          `db:"ecco_id" json:"eccoId"`
	EccoEntityID       int32          `db:"ecco_entity_id" json:"eccoEntityId"`
	EccoContractNo     sql.NullString `db:"ecco_contract_no" json:"eccoContractNo"`
	EccoContractDate   sql.NullTime   `db:"ecco_contract_date" json:"eccoContractDate"`
	EccoStartDate      sql.NullTime   `db:"ecco_start_date" json:"eccoStartDate"`
	EccoEndDate        sql.NullTime   `db:"ecco_end_date" json:"eccoEndDate"`
	EccoNotes          sql.NullString `db:"ecco_notes" json:"eccoNotes"`
	EccoModifiedDate   sql.NullTime   `db:"ecco_modified_date" json:"eccoModifiedDate"`
	EccoMediaLink      sql.NullString `db:"ecco_media_link" json:"eccoMediaLink"`
	EccoJotyID         sql.NullInt32  `db:"ecco_joty_id" json:"eccoJotyId"`
	EccoAccountManager sql.NullInt32  `db:"ecco_account_manager" json:"eccoAccountManager"`
	EccoClitID         sql.NullInt32  `db:"ecco_clit_id" json:"eccoClitId"`
	EccoStatus         sql.NullString `db:"ecco_status" json:"eccoStatus"`
}

func (q *Queries) CreateClientContract(ctx context.Context, arg CreateClientContractParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createClientContract,
		arg.EccoID,
		arg.EccoEntityID,
		arg.EccoContractNo,
		arg.EccoContractDate,
		arg.EccoStartDate,
		arg.EccoEndDate,
		arg.EccoNotes,
		arg.EccoModifiedDate,
		arg.EccoMediaLink,
		arg.EccoJotyID,
		arg.EccoAccountManager,
		arg.EccoClitID,
		arg.EccoStatus,
	)
	var ecco_id int32
	err := row.Scan(&ecco_id)
	return ecco_id, err
}

const createDepartment = `-- name: CreateDepartment :one

INSERT INTO hr.department 
(dept_id, dept_name, dept_modified_date)
VALUES($1,$2,$3)
RETURNING dept_id
`

type CreateDepartmentParams struct {
	DeptID           int32          `db:"dept_id" json:"deptId"`
	DeptName         sql.NullString `db:"dept_name" json:"deptName"`
	DeptModifiedDate sql.NullTime   `db:"dept_modified_date" json:"deptModifiedDate"`
}

func (q *Queries) CreateDepartment(ctx context.Context, arg CreateDepartmentParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createDepartment, arg.DeptID, arg.DeptName, arg.DeptModifiedDate)
	var dept_id int32
	err := row.Scan(&dept_id)
	return dept_id, err
}

const createEducation = `-- name: CreateEducation :one

INSERT INTO users.users_education
(usdu_id, usdu_entity_id, usdu_school, usdu_degree, usdu_field_study,
usdu_graduate_year, usdu_start_date, usdu_end_date, usdu_grade,
usdu_activities, usdu_description, usdu_modified_date)
VALUES($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12)
RETURNING usdu_id
`

type CreateEducationParams struct {
	UsduID           int32          `db:"usdu_id" json:"usduId"`
	UsduEntityID     int32          `db:"usdu_entity_id" json:"usduEntityId"`
	UsduSchool       sql.NullString `db:"usdu_school" json:"usduSchool"`
	UsduDegree       sql.NullString `db:"usdu_degree" json:"usduDegree"`
	UsduFieldStudy   sql.NullString `db:"usdu_field_study" json:"usduFieldStudy"`
	UsduGraduateYear sql.NullString `db:"usdu_graduate_year" json:"usduGraduateYear"`
	UsduStartDate    sql.NullTime   `db:"usdu_start_date" json:"usduStartDate"`
	UsduEndDate      sql.NullTime   `db:"usdu_end_date" json:"usduEndDate"`
	UsduGrade        sql.NullString `db:"usdu_grade" json:"usduGrade"`
	UsduActivities   sql.NullString `db:"usdu_activities" json:"usduActivities"`
	UsduDescription  sql.NullString `db:"usdu_description" json:"usduDescription"`
	UsduModifiedDate sql.NullTime   `db:"usdu_modified_date" json:"usduModifiedDate"`
}

func (q *Queries) CreateEducation(ctx context.Context, arg CreateEducationParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createEducation,
		arg.UsduID,
		arg.UsduEntityID,
		arg.UsduSchool,
		arg.UsduDegree,
		arg.UsduFieldStudy,
		arg.UsduGraduateYear,
		arg.UsduStartDate,
		arg.UsduEndDate,
		arg.UsduGrade,
		arg.UsduActivities,
		arg.UsduDescription,
		arg.UsduModifiedDate,
	)
	var usdu_id int32
	err := row.Scan(&usdu_id)
	return usdu_id, err
}

const createEmail = `-- name: CreateEmail :one

INSERT INTO users.users_email
(pmail_entity_id, pmail_id, pmail_address, pmail_modified_date)
VALUES($1,$2,$3,$4)
RETURNING pmail_id
`

type CreateEmailParams struct {
	PmailEntityID     int32          `db:"pmail_entity_id" json:"pmailEntityId"`
	PmailID           int32          `db:"pmail_id" json:"pmailId"`
	PmailAddress      sql.NullString `db:"pmail_address" json:"pmailAddress"`
	PmailModifiedDate sql.NullTime   `db:"pmail_modified_date" json:"pmailModifiedDate"`
}

func (q *Queries) CreateEmail(ctx context.Context, arg CreateEmailParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createEmail,
		arg.PmailEntityID,
		arg.PmailID,
		arg.PmailAddress,
		arg.PmailModifiedDate,
	)
	var pmail_id int32
	err := row.Scan(&pmail_id)
	return pmail_id, err
}

const createEmployee = `-- name: CreateEmployee :one

INSERT INTO hr.employee (emp_entity_id, emp_emp_number, emp_national_id, emp_birth_date, emp_marital_status, emp_gender, emp_hire_date, emp_salaried_flag, emp_vacation_hours, emp_sickleave_hours, emp_current_flag, emp_modified_date, emp_type, emp_joro_id, emp_emp_entity_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15)
RETURNING emp_entity_id
`

type CreateEmployeeParams struct {
	EmpEntityID       int32          `db:"emp_entity_id" json:"empEntityId"`
	EmpEmpNumber      sql.NullString `db:"emp_emp_number" json:"empEmpNumber"`
	EmpNationalID     sql.NullString `db:"emp_national_id" json:"empNationalId"`
	EmpBirthDate      sql.NullTime   `db:"emp_birth_date" json:"empBirthDate"`
	EmpMaritalStatus  sql.NullString `db:"emp_marital_status" json:"empMaritalStatus"`
	EmpGender         sql.NullString `db:"emp_gender" json:"empGender"`
	EmpHireDate       sql.NullTime   `db:"emp_hire_date" json:"empHireDate"`
	EmpSalariedFlag   sql.NullString `db:"emp_salaried_flag" json:"empSalariedFlag"`
	EmpVacationHours  sql.NullInt16  `db:"emp_vacation_hours" json:"empVacationHours"`
	EmpSickleaveHours sql.NullInt16  `db:"emp_sickleave_hours" json:"empSickleaveHours"`
	EmpCurrentFlag    sql.NullInt16  `db:"emp_current_flag" json:"empCurrentFlag"`
	EmpModifiedDate   sql.NullTime   `db:"emp_modified_date" json:"empModifiedDate"`
	EmpType           sql.NullString `db:"emp_type" json:"empType"`
	EmpJoroID         sql.NullInt32  `db:"emp_joro_id" json:"empJoroId"`
	EmpEmpEntityID    sql.NullInt32  `db:"emp_emp_entity_id" json:"empEmpEntityId"`
}

func (q *Queries) CreateEmployee(ctx context.Context, arg CreateEmployeeParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createEmployee,
		arg.EmpEntityID,
		arg.EmpEmpNumber,
		arg.EmpNationalID,
		arg.EmpBirthDate,
		arg.EmpMaritalStatus,
		arg.EmpGender,
		arg.EmpHireDate,
		arg.EmpSalariedFlag,
		arg.EmpVacationHours,
		arg.EmpSickleaveHours,
		arg.EmpCurrentFlag,
		arg.EmpModifiedDate,
		arg.EmpType,
		arg.EmpJoroID,
		arg.EmpEmpEntityID,
	)
	var emp_entity_id int32
	err := row.Scan(&emp_entity_id)
	return emp_entity_id, err
}

const createEmployeeDepartmentHistory = `-- name: CreateEmployeeDepartmentHistory :one

INSERT INTO hr.employee_department_history 
(edhi_id, edhi_entity_id, edhi_start_date, edhi_end_date, edhi_modified_date, edhi_dept_id)
VALUES($1,$2,$3,$4,$5,$6)
RETURNING edhi_id
`

type CreateEmployeeDepartmentHistoryParams struct {
	EdhiID           int32         `db:"edhi_id" json:"edhiId"`
	EdhiEntityID     int32         `db:"edhi_entity_id" json:"edhiEntityId"`
	EdhiStartDate    sql.NullTime  `db:"edhi_start_date" json:"edhiStartDate"`
	EdhiEndDate      sql.NullTime  `db:"edhi_end_date" json:"edhiEndDate"`
	EdhiModifiedDate sql.NullTime  `db:"edhi_modified_date" json:"edhiModifiedDate"`
	EdhiDeptID       sql.NullInt32 `db:"edhi_dept_id" json:"edhiDeptId"`
}

func (q *Queries) CreateEmployeeDepartmentHistory(ctx context.Context, arg CreateEmployeeDepartmentHistoryParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createEmployeeDepartmentHistory,
		arg.EdhiID,
		arg.EdhiEntityID,
		arg.EdhiStartDate,
		arg.EdhiEndDate,
		arg.EdhiModifiedDate,
		arg.EdhiDeptID,
	)
	var edhi_id int32
	err := row.Scan(&edhi_id)
	return edhi_id, err
}

const createEmployeeRange = `-- name: CreateEmployeeRange :one
INSERT INTO jobHire.employee_range(emra_id, emra_range_min, emra_range_max, emra_modified_date) VALUES ($1, $2, $3, $4)
RETURNING emra_id
`

type CreateEmployeeRangeParams struct {
	EmraID           int32         `db:"emra_id" json:"emraId"`
	EmraRangeMin     sql.NullInt32 `db:"emra_range_min" json:"emraRangeMin"`
	EmraRangeMax     sql.NullInt32 `db:"emra_range_max" json:"emraRangeMax"`
	EmraModifiedDate sql.NullTime  `db:"emra_modified_date" json:"emraModifiedDate"`
}

func (q *Queries) CreateEmployeeRange(ctx context.Context, arg CreateEmployeeRangeParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createEmployeeRange,
		arg.EmraID,
		arg.EmraRangeMin,
		arg.EmraRangeMax,
		arg.EmraModifiedDate,
	)
	var emra_id int32
	err := row.Scan(&emra_id)
	return emra_id, err
}

const createExperience = `-- name: CreateExperience :one

INSERT INTO users.users_experiences
(usex_id, usex_entity_id, usex_title, usex_profile_headline, usex_employment_type,
usex_company_name, usex_is_current, usex_start_date, usex_end_date, usex_industry,
usex_description, usex_experience_type, usex_city_id)
VALUES($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)
RETURNING usex_id
`

type CreateExperienceParams struct {
	UsexID              int32          `db:"usex_id" json:"usexId"`
	UsexEntityID        int32          `db:"usex_entity_id" json:"usexEntityId"`
	UsexTitle           sql.NullString `db:"usex_title" json:"usexTitle"`
	UsexProfileHeadline sql.NullString `db:"usex_profile_headline" json:"usexProfileHeadline"`
	UsexEmploymentType  sql.NullString `db:"usex_employment_type" json:"usexEmploymentType"`
	UsexCompanyName     sql.NullString `db:"usex_company_name" json:"usexCompanyName"`
	UsexIsCurrent       sql.NullString `db:"usex_is_current" json:"usexIsCurrent"`
	UsexStartDate       sql.NullTime   `db:"usex_start_date" json:"usexStartDate"`
	UsexEndDate         sql.NullTime   `db:"usex_end_date" json:"usexEndDate"`
	UsexIndustry        sql.NullString `db:"usex_industry" json:"usexIndustry"`
	UsexDescription     sql.NullString `db:"usex_description" json:"usexDescription"`
	UsexExperienceType  sql.NullString `db:"usex_experience_type" json:"usexExperienceType"`
	UsexCityID          sql.NullInt32  `db:"usex_city_id" json:"usexCityId"`
}

func (q *Queries) CreateExperience(ctx context.Context, arg CreateExperienceParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createExperience,
		arg.UsexID,
		arg.UsexEntityID,
		arg.UsexTitle,
		arg.UsexProfileHeadline,
		arg.UsexEmploymentType,
		arg.UsexCompanyName,
		arg.UsexIsCurrent,
		arg.UsexStartDate,
		arg.UsexEndDate,
		arg.UsexIndustry,
		arg.UsexDescription,
		arg.UsexExperienceType,
		arg.UsexCityID,
	)
	var usex_id int32
	err := row.Scan(&usex_id)
	return usex_id, err
}

const createExperienceSkill = `-- name: CreateExperienceSkill :one

INSERT INTO users.users_experiences_skill
(uesk_usex_id, uesk_uski_id)
VALUES($1,$2)
RETURNING uesk_usex_id
`

type CreateExperienceSkillParams struct {
	UeskUsexID int32 `db:"uesk_usex_id" json:"ueskUsexId"`
	UeskUskiID int32 `db:"uesk_uski_id" json:"ueskUskiId"`
}

func (q *Queries) CreateExperienceSkill(ctx context.Context, arg CreateExperienceSkillParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createExperienceSkill, arg.UeskUsexID, arg.UeskUskiID)
	var uesk_usex_id int32
	err := row.Scan(&uesk_usex_id)
	return uesk_usex_id, err
}

const createInstructorProgram = `-- name: CreateInstructorProgram :one
INSERT INTO bootcamp.instructor_programs
(batch_id, inpro_entity_id, inpro_emp_entity_id, inpro_modified_date)
VALUES ($1, $2, $3, $4)
RETURNING batch_id
`

type CreateInstructorProgramParams struct {
	BatchID           int32        `db:"batch_id" json:"batchId"`
	InproEntityID     int32        `db:"inpro_entity_id" json:"inproEntityId"`
	InproEmpEntityID  int32        `db:"inpro_emp_entity_id" json:"inproEmpEntityId"`
	InproModifiedDate sql.NullTime `db:"inpro_modified_date" json:"inproModifiedDate"`
}

func (q *Queries) CreateInstructorProgram(ctx context.Context, arg CreateInstructorProgramParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createInstructorProgram,
		arg.BatchID,
		arg.InproEntityID,
		arg.InproEmpEntityID,
		arg.InproModifiedDate,
	)
	var batch_id int32
	err := row.Scan(&batch_id)
	return batch_id, err
}

const createJobPost = `-- name: CreateJobPost :one
INSERT INTO jobHire.job_post(jopo_entity_id, jopo_number, jopo_title, jopo_start_date, jopo_end_date, jopo_min_salary, jopo_max_salary, jopo_min_experience, jopo_max_experience, jopo_primary_skill, jopo_secondary_skill, jopo_publish_date, jopo_modified_date, jopo_emp_entity_id, jopo_clit_id, jopo_joro_id, jopo_joty_id, jopo_joca_id, jopo_addr_id, jopo_status) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20)
RETURNING jopo_entity_id
`

type CreateJobPostParams struct {
	JopoEntityID       int32          `db:"jopo_entity_id" json:"jopoEntityId"`
	JopoNumber         sql.NullString `db:"jopo_number" json:"jopoNumber"`
	JopoTitle          sql.NullString `db:"jopo_title" json:"jopoTitle"`
	JopoStartDate      sql.NullTime   `db:"jopo_start_date" json:"jopoStartDate"`
	JopoEndDate        sql.NullTime   `db:"jopo_end_date" json:"jopoEndDate"`
	JopoMinSalary      sql.NullInt32  `db:"jopo_min_salary" json:"jopoMinSalary"`
	JopoMaxSalary      sql.NullInt32  `db:"jopo_max_salary" json:"jopoMaxSalary"`
	JopoMinExperience  sql.NullInt32  `db:"jopo_min_experience" json:"jopoMinExperience"`
	JopoMaxExperience  sql.NullInt32  `db:"jopo_max_experience" json:"jopoMaxExperience"`
	JopoPrimarySkill   sql.NullString `db:"jopo_primary_skill" json:"jopoPrimarySkill"`
	JopoSecondarySkill sql.NullString `db:"jopo_secondary_skill" json:"jopoSecondarySkill"`
	JopoPublishDate    sql.NullTime   `db:"jopo_publish_date" json:"jopoPublishDate"`
	JopoModifiedDate   sql.NullTime   `db:"jopo_modified_date" json:"jopoModifiedDate"`
	JopoEmpEntityID    sql.NullInt32  `db:"jopo_emp_entity_id" json:"jopoEmpEntityId"`
	JopoClitID         sql.NullInt32  `db:"jopo_clit_id" json:"jopoClitId"`
	JopoJoroID         sql.NullInt32  `db:"jopo_joro_id" json:"jopoJoroId"`
	JopoJotyID         sql.NullInt32  `db:"jopo_joty_id" json:"jopoJotyId"`
	JopoJocaID         sql.NullInt32  `db:"jopo_joca_id" json:"jopoJocaId"`
	JopoAddrID         sql.NullInt32  `db:"jopo_addr_id" json:"jopoAddrId"`
	JopoStatus         sql.NullString `db:"jopo_status" json:"jopoStatus"`
}

func (q *Queries) CreateJobPost(ctx context.Context, arg CreateJobPostParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createJobPost,
		arg.JopoEntityID,
		arg.JopoNumber,
		arg.JopoTitle,
		arg.JopoStartDate,
		arg.JopoEndDate,
		arg.JopoMinSalary,
		arg.JopoMaxSalary,
		arg.JopoMinExperience,
		arg.JopoMaxExperience,
		arg.JopoPrimarySkill,
		arg.JopoSecondarySkill,
		arg.JopoPublishDate,
		arg.JopoModifiedDate,
		arg.JopoEmpEntityID,
		arg.JopoClitID,
		arg.JopoJoroID,
		arg.JopoJotyID,
		arg.JopoJocaID,
		arg.JopoAddrID,
		arg.JopoStatus,
	)
	var jopo_entity_id int32
	err := row.Scan(&jopo_entity_id)
	return jopo_entity_id, err
}

const createJobPostDesc = `-- name: CreateJobPostDesc :one
INSERT INTO jobHire.job_post_desc(jopo_entity_id, jopo_description, jopo_responsibility, jopo_target, jopo_benefit) VALUES ($1, $2, $3, $4, $5)
RETURNING jopo_entity_id
`

type CreateJobPostDescParams struct {
	JopoEntityID       int32                 `db:"jopo_entity_id" json:"jopoEntityId"`
	JopoDescription    sql.NullString `db:"jopo_description" json:"jopoDescription"`
	JopoResponsibility sql.NullString `db:"jopo_responsibility" json:"jopoResponsibility"`
	JopoTarget         sql.NullString `db:"jopo_target" json:"jopoTarget"`
	JopoBenefit        sql.NullString `db:"jopo_benefit" json:"jopoBenefit"`
}

func (q *Queries) CreateJobPostDesc(ctx context.Context, arg CreateJobPostDescParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createJobPostDesc,
		arg.JopoEntityID,
		arg.JopoDescription,
		arg.JopoResponsibility,
		arg.JopoTarget,
		arg.JopoBenefit,
	)
	var jopo_entity_id int32
	err := row.Scan(&jopo_entity_id)
	return jopo_entity_id, err
}

const createLicense = `-- name: CreateLicense :one

INSERT INTO users.users_license
(usli_id, usli_license_code, usli_modified_date, usli_status, usli_entity_id)
VALUES($1,$2,$3,$4,$5)
RETURNING usli_id
`

type CreateLicenseParams struct {
	UsliID           int32          `db:"usli_id" json:"usliId"`
	UsliLicenseCode  sql.NullString `db:"usli_license_code" json:"usliLicenseCode"`
	UsliModifiedDate sql.NullTime   `db:"usli_modified_date" json:"usliModifiedDate"`
	UsliStatus       sql.NullString `db:"usli_status" json:"usliStatus"`
	UsliEntityID     int32          `db:"usli_entity_id" json:"usliEntityId"`
}

func (q *Queries) CreateLicense(ctx context.Context, arg CreateLicenseParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createLicense,
		arg.UsliID,
		arg.UsliLicenseCode,
		arg.UsliModifiedDate,
		arg.UsliStatus,
		arg.UsliEntityID,
	)
	var usli_id int32
	err := row.Scan(&usli_id)
	return usli_id, err
}

const createMasterAddress = `-- name: CreateMasterAddress :one
INSERT INTO master.address (addr_id, addr_line1, addr_line2, addr_postal_code, addr_spatial_location, addr_modified_date, addr_city_id)
VALUES($1, $2, $3, $4, $5, $6, $7)
RETURNING addr_id
`

type CreateMasterAddressParams struct {
	AddrID              int32          `db:"addr_id" json:"addrId"`
	AddrLine1           sql.NullString `db:"addr_line1" json:"addrLine1"`
	AddrLine2           sql.NullString `db:"addr_line2" json:"addrLine2"`
	AddrPostalCode      sql.NullString `db:"addr_postal_code" json:"addrPostalCode"`
	AddrSpatialLocation sql.NullString `db:"addr_spatial_location" json:"addrSpatialLocation"`
	AddrModifiedDate    sql.NullTime   `db:"addr_modified_date" json:"addrModifiedDate"`
	AddrCityID          sql.NullInt32  `db:"addr_city_id" json:"addrCityId"`
}

func (q *Queries) CreateMasterAddress(ctx context.Context, arg CreateMasterAddressParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createMasterAddress,
		arg.AddrID,
		arg.AddrLine1,
		arg.AddrLine2,
		arg.AddrPostalCode,
		arg.AddrSpatialLocation,
		arg.AddrModifiedDate,
		arg.AddrCityID,
	)
	var addr_id int32
	err := row.Scan(&addr_id)
	return addr_id, err
}

const createMasterCity = `-- name: CreateMasterCity :one
INSERT INTO master.city (city_id, city_name, city_modified_date, city_prov_id)
VALUES($1, $2, $3, $4)
RETURNING city_id
`

type CreateMasterCityParams struct {
	CityID           int32          `db:"city_id" json:"cityId"`
	CityName         sql.NullString `db:"city_name" json:"cityName"`
	CityModifiedDate sql.NullTime   `db:"city_modified_date" json:"cityModifiedDate"`
	CityProvID       sql.NullInt32  `db:"city_prov_id" json:"cityProvId"`
}

func (q *Queries) CreateMasterCity(ctx context.Context, arg CreateMasterCityParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createMasterCity,
		arg.CityID,
		arg.CityName,
		arg.CityModifiedDate,
		arg.CityProvID,
	)
	var city_id int32
	err := row.Scan(&city_id)
	return city_id, err
}

const createMasterJobRole = `-- name: CreateMasterJobRole :one
INSERT INTO master.job_role(joro_id, joro_name, joro_modified_date)
VALUES($1, $2, $3)
RETURNING joro_id
`

type CreateMasterJobRoleParams struct {
	JoroID           int32          `db:"joro_id" json:"joroId"`
	JoroName         sql.NullString `db:"joro_name" json:"joroName"`
	JoroModifiedDate sql.NullTime   `db:"joro_modified_date" json:"joroModifiedDate"`
}

func (q *Queries) CreateMasterJobRole(ctx context.Context, arg CreateMasterJobRoleParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createMasterJobRole, arg.JoroID, arg.JoroName, arg.JoroModifiedDate)
	var joro_id int32
	err := row.Scan(&joro_id)
	return joro_id, err
}

const createMasterWorkingType = `-- name: CreateMasterWorkingType :one
INSERT INTO master.working_type (woty_code, woty_name)
VALUES($1, $2)
RETURNING woty_code
`

type CreateMasterWorkingTypeParams struct {
	WotyCode string         `db:"woty_code" json:"wotyCode"`
	WotyName sql.NullString `db:"woty_name" json:"wotyName"`
}

func (q *Queries) CreateMasterWorkingType(ctx context.Context, arg CreateMasterWorkingTypeParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createMasterWorkingType, arg.WotyCode, arg.WotyName)
	var woty_code string
	err := row.Scan(&woty_code)
	return woty_code, err
}

const createMedia = `-- name: CreateMedia :one

INSERT INTO users.users_media
(usme_id, usme_entity_id, usme_file_link, usme_filename,
usme_filesize, usme_filetype, usme_note, usme_modified_date)
VALUES($1,$2,$3,$4,$5,$6,$7,$8)
RETURNING usme_id
`

type CreateMediaParams struct {
	UsmeID           int32          `db:"usme_id" json:"usmeId"`
	UsmeEntityID     int32          `db:"usme_entity_id" json:"usmeEntityId"`
	UsmeFileLink     sql.NullString `db:"usme_file_link" json:"usmeFileLink"`
	UsmeFilename     sql.NullString `db:"usme_filename" json:"usmeFilename"`
	UsmeFilesize     sql.NullInt32  `db:"usme_filesize" json:"usmeFilesize"`
	UsmeFiletype     sql.NullString `db:"usme_filetype" json:"usmeFiletype"`
	UsmeNote         sql.NullString `db:"usme_note" json:"usmeNote"`
	UsmeModifiedDate sql.NullTime   `db:"usme_modified_date" json:"usmeModifiedDate"`
}

func (q *Queries) CreateMedia(ctx context.Context, arg CreateMediaParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createMedia,
		arg.UsmeID,
		arg.UsmeEntityID,
		arg.UsmeFileLink,
		arg.UsmeFilename,
		arg.UsmeFilesize,
		arg.UsmeFiletype,
		arg.UsmeNote,
		arg.UsmeModifiedDate,
	)
	var usme_id int32
	err := row.Scan(&usme_id)
	return usme_id, err
}

const createPayHistory = `-- name: CreatePayHistory :one

INSERT INTO hr.employee_pay_history (ephi_entity_id, ephi_rate_change_date, ephi_rate_salary, ephi_pay_frequence, ephi_modified_date) VALUES ($1, $2, $3, $4, $5)
RETURNING ephi_entity_id
`

type CreatePayHistoryParams struct {
	EphiEntityID       int32         `db:"ephi_entity_id" json:"ephiEntityId"`
	EphiRateChangeDate time.Time     `db:"ephi_rate_change_date" json:"ephiRateChangeDate"`
	EphiRateSalary     sql.NullInt32 `db:"ephi_rate_salary" json:"ephiRateSalary"`
	EphiPayFrequence   sql.NullInt16 `db:"ephi_pay_frequence" json:"ephiPayFrequence"`
	EphiModifiedDate   sql.NullTime  `db:"ephi_modified_date" json:"ephiModifiedDate"`
}

func (q *Queries) CreatePayHistory(ctx context.Context, arg CreatePayHistoryParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createPayHistory,
		arg.EphiEntityID,
		arg.EphiRateChangeDate,
		arg.EphiRateSalary,
		arg.EphiPayFrequence,
		arg.EphiModifiedDate,
	)
	var ephi_entity_id int32
	err := row.Scan(&ephi_entity_id)
	return ephi_entity_id, err
}

const createPaymentBank = `-- name: CreatePaymentBank :one

INSERT INTO
    payment.bank(
        bank_entity_id,
        bank_code,
        bank_name,
        bank_modified_date
    )
VALUES ($1, $2, $3, $4) RETURNING bank_entity_id
`

type CreatePaymentBankParams struct {
	BankEntityID     int32          `db:"bank_entity_id" json:"bankEntityId"`
	BankCode         sql.NullString `db:"bank_code" json:"bankCode"`
	BankName         sql.NullString `db:"bank_name" json:"bankName"`
	BankModifiedDate sql.NullTime   `db:"bank_modified_date" json:"bankModifiedDate"`
}

func (q *Queries) CreatePaymentBank(ctx context.Context, arg CreatePaymentBankParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createPaymentBank,
		arg.BankEntityID,
		arg.BankCode,
		arg.BankName,
		arg.BankModifiedDate,
	)
	var bank_entity_id int32
	err := row.Scan(&bank_entity_id)
	return bank_entity_id, err
}

const createPaymentFintech = `-- name: CreatePaymentFintech :one

INSERT INTO
    payment.fintech (
        fint_entity_id,
        fint_code,
        fint_name,
        fint_modified_date
    )
VALUES ($1, $2, $3, $4) RETURNING fint_entity_id
`

type CreatePaymentFintechParams struct {
	FintEntityID     int32          `db:"fint_entity_id" json:"fintEntityId"`
	FintCode         sql.NullString `db:"fint_code" json:"fintCode"`
	FintName         sql.NullString `db:"fint_name" json:"fintName"`
	FintModifiedDate sql.NullTime   `db:"fint_modified_date" json:"fintModifiedDate"`
}

func (q *Queries) CreatePaymentFintech(ctx context.Context, arg CreatePaymentFintechParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createPaymentFintech,
		arg.FintEntityID,
		arg.FintCode,
		arg.FintName,
		arg.FintModifiedDate,
	)
	var fint_entity_id int32
	err := row.Scan(&fint_entity_id)
	return fint_entity_id, err
}

const createPaymentTransaction_payment = `-- name: CreatePaymentTransaction_payment :one

INSERT INTO
    payment.transaction_payment (
        trpa_id,
        trpa_code_number,
        trpa_order_number,
        trpa_debit,
        trpa_credit,
        trpa_type,
        trpa_note,
        trpa_modified_date,
        trpa_source_id,
        trpa_target_id,
        trpa_user_entity_id
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11
    ) RETURNING trpa_id
`

type CreatePaymentTransaction_paymentParams struct {
	TrpaID           int32          `db:"trpa_id" json:"trpaId"`
	TrpaCodeNumber   sql.NullString `db:"trpa_code_number" json:"trpaCodeNumber"`
	TrpaOrderNumber  sql.NullString `db:"trpa_order_number" json:"trpaOrderNumber"`
	TrpaDebit        sql.NullString `db:"trpa_debit" json:"trpaDebit"`
	TrpaCredit       sql.NullString `db:"trpa_credit" json:"trpaCredit"`
	TrpaType         sql.NullString `db:"trpa_type" json:"trpaType"`
	TrpaNote         sql.NullString `db:"trpa_note" json:"trpaNote"`
	TrpaModifiedDate sql.NullTime   `db:"trpa_modified_date" json:"trpaModifiedDate"`
	TrpaSourceID     string         `db:"trpa_source_id" json:"trpaSourceId"`
	TrpaTargetID     string         `db:"trpa_target_id" json:"trpaTargetId"`
	TrpaUserEntityID sql.NullInt32  `db:"trpa_user_entity_id" json:"trpaUserEntityId"`
}

func (q *Queries) CreatePaymentTransaction_payment(ctx context.Context, arg CreatePaymentTransaction_paymentParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createPaymentTransaction_payment,
		arg.TrpaID,
		arg.TrpaCodeNumber,
		arg.TrpaOrderNumber,
		arg.TrpaDebit,
		arg.TrpaCredit,
		arg.TrpaType,
		arg.TrpaNote,
		arg.TrpaModifiedDate,
		arg.TrpaSourceID,
		arg.TrpaTargetID,
		arg.TrpaUserEntityID,
	)
	var trpa_id int32
	err := row.Scan(&trpa_id)
	return trpa_id, err
}

const createPaymentUsers_account = `-- name: CreatePaymentUsers_account :one

INSERT INTO
    payment.users_account (
        usac_bank_entity_id,
        usac_user_entity_id,
        usac_account_number,
        usac_saldo,
        usac_type,
        usac_start_date,
        usac_end_date,
        usac_modified_date,
        usac_status
    )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) RETURNING usac_bank_entity_id
`

type CreatePaymentUsers_accountParams struct {
	UsacBankEntityID  int32          `db:"usac_bank_entity_id" json:"usacBankEntityId"`
	UsacUserEntityID  int32          `db:"usac_user_entity_id" json:"usacUserEntityId"`
	UsacAccountNumber sql.NullString `db:"usac_account_number" json:"usacAccountNumber"`
	UsacSaldo         sql.NullString `db:"usac_saldo" json:"usacSaldo"`
	UsacType          sql.NullString `db:"usac_type" json:"usacType"`
	UsacStartDate     sql.NullTime   `db:"usac_start_date" json:"usacStartDate"`
	UsacEndDate       sql.NullTime   `db:"usac_end_date" json:"usacEndDate"`
	UsacModifiedDate  sql.NullTime   `db:"usac_modified_date" json:"usacModifiedDate"`
	UsacStatus        sql.NullString `db:"usac_status" json:"usacStatus"`
}

func (q *Queries) CreatePaymentUsers_account(ctx context.Context, arg CreatePaymentUsers_accountParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createPaymentUsers_account,
		arg.UsacBankEntityID,
		arg.UsacUserEntityID,
		arg.UsacAccountNumber,
		arg.UsacSaldo,
		arg.UsacType,
		arg.UsacStartDate,
		arg.UsacEndDate,
		arg.UsacModifiedDate,
		arg.UsacStatus,
	)
	var usac_bank_entity_id int32
	err := row.Scan(&usac_bank_entity_id)
	return usac_bank_entity_id, err
}

const createPhones = `-- name: CreatePhones :one

INSERT INTO users.users_phones
(uspo_entity_id, uspo_number, uspo_modified_date, uspo_ponty_code)
VALUES($1,$2,$3,$4)
RETURNING uspo_entity_id
`

type CreatePhonesParams struct {
	UspoEntityID     int32          `db:"uspo_entity_id" json:"uspoEntityId"`
	UspoNumber       string         `db:"uspo_number" json:"uspoNumber"`
	UspoModifiedDate sql.NullTime   `db:"uspo_modified_date" json:"uspoModifiedDate"`
	UspoPontyCode    sql.NullString `db:"uspo_ponty_code" json:"uspoPontyCode"`
}

func (q *Queries) CreatePhones(ctx context.Context, arg CreatePhonesParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createPhones,
		arg.UspoEntityID,
		arg.UspoNumber,
		arg.UspoModifiedDate,
		arg.UspoPontyCode,
	)
	var uspo_entity_id int32
	err := row.Scan(&uspo_entity_id)
	return uspo_entity_id, err
}

const createProgramApply = `-- name: CreateProgramApply :one
INSERT INTO bootcamp.program_apply
(prap_user_entity_id, prap_prog_entity_id, prap_test_score, prap_gpa, prap_iq_test, prap_review, prap_modified_date, prap_status)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING prap_user_entity_id
`

type CreateProgramApplyParams struct {
	PrapUserEntityID int32          `db:"prap_user_entity_id" json:"prapUserEntityId"`
	PrapProgEntityID int32          `db:"prap_prog_entity_id" json:"prapProgEntityId"`
	PrapTestScore    sql.NullInt32  `db:"prap_test_score" json:"prapTestScore"`
	PrapGpa          sql.NullInt32  `db:"prap_gpa" json:"prapGpa"`
	PrapIqTest       sql.NullInt32  `db:"prap_iq_test" json:"prapIqTest"`
	PrapReview       sql.NullString `db:"prap_review" json:"prapReview"`
	PrapModifiedDate sql.NullTime   `db:"prap_modified_date" json:"prapModifiedDate"`
	PrapStatus       sql.NullString `db:"prap_status" json:"prapStatus"`
}

func (q *Queries) CreateProgramApply(ctx context.Context, arg CreateProgramApplyParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createProgramApply,
		arg.PrapUserEntityID,
		arg.PrapProgEntityID,
		arg.PrapTestScore,
		arg.PrapGpa,
		arg.PrapIqTest,
		arg.PrapReview,
		arg.PrapModifiedDate,
		arg.PrapStatus,
	)
	var prap_user_entity_id int32
	err := row.Scan(&prap_user_entity_id)
	return prap_user_entity_id, err
}

const createProgramApplyProgress = `-- name: CreateProgramApplyProgress :one
INSERT INTO bootcamp.program_apply_progress
(parog_id, parog_user_entity_id, parog_prog_entity_id, parog_action_date, parog_modified_date, parog_comment, parog_progress_name, parog_emp_entity_id, parog_status)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING parog_id
`

type CreateProgramApplyProgressParams struct {
	ParogID           int32          `db:"parog_id" json:"parogId"`
	ParogUserEntityID int32          `db:"parog_user_entity_id" json:"parogUserEntityId"`
	ParogProgEntityID int32          `db:"parog_prog_entity_id" json:"parogProgEntityId"`
	ParogActionDate   sql.NullTime   `db:"parog_action_date" json:"parogActionDate"`
	ParogModifiedDate sql.NullTime   `db:"parog_modified_date" json:"parogModifiedDate"`
	ParogComment      sql.NullString `db:"parog_comment" json:"parogComment"`
	ParogProgressName sql.NullString `db:"parog_progress_name" json:"parogProgressName"`
	ParogEmpEntityID  sql.NullInt32  `db:"parog_emp_entity_id" json:"parogEmpEntityId"`
	ParogStatus       sql.NullString `db:"parog_status" json:"parogStatus"`
}

func (q *Queries) CreateProgramApplyProgress(ctx context.Context, arg CreateProgramApplyProgressParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createProgramApplyProgress,
		arg.ParogID,
		arg.ParogUserEntityID,
		arg.ParogProgEntityID,
		arg.ParogActionDate,
		arg.ParogModifiedDate,
		arg.ParogComment,
		arg.ParogProgressName,
		arg.ParogEmpEntityID,
		arg.ParogStatus,
	)
	var parog_id int32
	err := row.Scan(&parog_id)
	return parog_id, err
}

const createRoles = `-- name: CreateRoles :one

INSERT INTO users.roles 
(role_id, role_name, role_type, role_modified_date)
VALUES($1,$2,$3,$4)
RETURNING role_id
`

type CreateRolesParams struct {
	RoleID           int32          `db:"role_id" json:"roleId"`
	RoleName         sql.NullString `db:"role_name" json:"roleName"`
	RoleType         sql.NullString `db:"role_type" json:"roleType"`
	RoleModifiedDate sql.NullTime   `db:"role_modified_date" json:"roleModifiedDate"`
}

func (q *Queries) CreateRoles(ctx context.Context, arg CreateRolesParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createRoles,
		arg.RoleID,
		arg.RoleName,
		arg.RoleType,
		arg.RoleModifiedDate,
	)
	var role_id int32
	err := row.Scan(&role_id)
	return role_id, err
}

const createSales_order_detail = `-- name: CreateSales_order_detail :one
INSERT INTO sales.sales_order_detail(sode_id, sode_qty, sode_unit_price, sode_unit_discount,sode_line_total,sode_modified_date,sode_sohe_id,sode_prog_entity_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING sode_id
`

type CreateSales_order_detailParams struct {
	SodeID           int32          `db:"sode_id" json:"sodeId"`
	SodeQty          sql.NullInt32  `db:"sode_qty" json:"sodeQty"`
	SodeUnitPrice    sql.NullString `db:"sode_unit_price" json:"sodeUnitPrice"`
	SodeUnitDiscount sql.NullString `db:"sode_unit_discount" json:"sodeUnitDiscount"`
	SodeLineTotal    sql.NullInt32  `db:"sode_line_total" json:"sodeLineTotal"`
	SodeModifiedDate sql.NullTime   `db:"sode_modified_date" json:"sodeModifiedDate"`
	SodeSoheID       sql.NullInt32  `db:"sode_sohe_id" json:"sodeSoheId"`
	SodeProgEntityID sql.NullInt32  `db:"sode_prog_entity_id" json:"sodeProgEntityId"`
}

func (q *Queries) CreateSales_order_detail(ctx context.Context, arg CreateSales_order_detailParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createSales_order_detail,
		arg.SodeID,
		arg.SodeQty,
		arg.SodeUnitPrice,
		arg.SodeUnitDiscount,
		arg.SodeLineTotal,
		arg.SodeModifiedDate,
		arg.SodeSoheID,
		arg.SodeProgEntityID,
	)
	var sode_id int32
	err := row.Scan(&sode_id)
	return sode_id, err
}

const createSales_order_header = `-- name: CreateSales_order_header :one
INSERT INTO sales.sales_order_header(sohe_id, sohe_order_date, sohe_due_date, sohe_ship_date,sohe_order_number,sohe_account_number,sohe_trpa_code_number,sohe_subtotal,sohe_tax,sohe_total_due,sohe_license_code,sohe_modified_date,sohe_user_entity_id,sohe_status) 
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)
RETURNING sohe_id
`

type CreateSales_order_headerParams struct {
	SoheID             int32          `db:"sohe_id" json:"soheId"`
	SoheOrderDate      sql.NullTime   `db:"sohe_order_date" json:"soheOrderDate"`
	SoheDueDate        sql.NullTime   `db:"sohe_due_date" json:"soheDueDate"`
	SoheShipDate       sql.NullTime   `db:"sohe_ship_date" json:"soheShipDate"`
	SoheOrderNumber    sql.NullString `db:"sohe_order_number" json:"soheOrderNumber"`
	SoheAccountNumber  sql.NullString `db:"sohe_account_number" json:"soheAccountNumber"`
	SoheTrpaCodeNumber sql.NullString `db:"sohe_trpa_code_number" json:"soheTrpaCodeNumber"`
	SoheSubtotal       sql.NullString `db:"sohe_subtotal" json:"soheSubtotal"`
	SoheTax            sql.NullString `db:"sohe_tax" json:"soheTax"`
	SoheTotalDue       sql.NullInt32  `db:"sohe_total_due" json:"soheTotalDue"`
	SoheLicenseCode    sql.NullString `db:"sohe_license_code" json:"soheLicenseCode"`
	SoheModifiedDate   sql.NullTime   `db:"sohe_modified_date" json:"soheModifiedDate"`
	SoheUserEntityID   sql.NullInt32  `db:"sohe_user_entity_id" json:"soheUserEntityId"`
	SoheStatus         sql.NullString `db:"sohe_status" json:"soheStatus"`
}

func (q *Queries) CreateSales_order_header(ctx context.Context, arg CreateSales_order_headerParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createSales_order_header,
		arg.SoheID,
		arg.SoheOrderDate,
		arg.SoheDueDate,
		arg.SoheShipDate,
		arg.SoheOrderNumber,
		arg.SoheAccountNumber,
		arg.SoheTrpaCodeNumber,
		arg.SoheSubtotal,
		arg.SoheTax,
		arg.SoheTotalDue,
		arg.SoheLicenseCode,
		arg.SoheModifiedDate,
		arg.SoheUserEntityID,
		arg.SoheStatus,
	)
	var sohe_id int32
	err := row.Scan(&sohe_id)
	return sohe_id, err
}

const createSales_special_offer = `-- name: CreateSales_special_offer :one
INSERT INTO sales.special_offer(spof_id, spof_description, spof_discount, spof_type,spof_start_date,spof_end_date,spof_min_qty,spof_max_qty,spof_modified_date,spof_cate_id) 
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING spof_id
`

type CreateSales_special_offerParams struct {
	SpofID           int32          `db:"spof_id" json:"spofId"`
	SpofDescription  sql.NullString `db:"spof_description" json:"spofDescription"`
	SpofDiscount     sql.NullInt32  `db:"spof_discount" json:"spofDiscount"`
	SpofType         sql.NullString `db:"spof_type" json:"spofType"`
	SpofStartDate    sql.NullTime   `db:"spof_start_date" json:"spofStartDate"`
	SpofEndDate      sql.NullTime   `db:"spof_end_date" json:"spofEndDate"`
	SpofMinQty       sql.NullInt32  `db:"spof_min_qty" json:"spofMinQty"`
	SpofMaxQty       sql.NullInt32  `db:"spof_max_qty" json:"spofMaxQty"`
	SpofModifiedDate sql.NullTime   `db:"spof_modified_date" json:"spofModifiedDate"`
	SpofCateID       sql.NullInt32  `db:"spof_cate_id" json:"spofCateId"`
}

func (q *Queries) CreateSales_special_offer(ctx context.Context, arg CreateSales_special_offerParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createSales_special_offer,
		arg.SpofID,
		arg.SpofDescription,
		arg.SpofDiscount,
		arg.SpofType,
		arg.SpofStartDate,
		arg.SpofEndDate,
		arg.SpofMinQty,
		arg.SpofMaxQty,
		arg.SpofModifiedDate,
		arg.SpofCateID,
	)
	var spof_id int32
	err := row.Scan(&spof_id)
	return spof_id, err
}

const createSkill = `-- name: CreateSkill :one

INSERT INTO users.users_skill
(uski_id, uski_entity_id, uski_modified_date, uski_skty_name)
VALUES($1,$2,$3,$4)
RETURNING uski_id
`

type CreateSkillParams struct {
	UskiID           int32          `db:"uski_id" json:"uskiId"`
	UskiEntityID     int32          `db:"uski_entity_id" json:"uskiEntityId"`
	UskiModifiedDate sql.NullTime   `db:"uski_modified_date" json:"uskiModifiedDate"`
	UskiSktyName     sql.NullString `db:"uski_skty_name" json:"uskiSktyName"`
}

func (q *Queries) CreateSkill(ctx context.Context, arg CreateSkillParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createSkill,
		arg.UskiID,
		arg.UskiEntityID,
		arg.UskiModifiedDate,
		arg.UskiSktyName,
	)
	var uski_id int32
	err := row.Scan(&uski_id)
	return uski_id, err
}

const createSpecial_offer_programs = `-- name: CreateSpecial_offer_programs :one
INSERT INTO sales.special_offer_programs(soco_id, soco_spof_id, soco_prog_entity_id, soco_status,soco_modified_date) VALUES ($1, $2, $3, $4, $5)
RETURNING soco_id
`

type CreateSpecial_offer_programsParams struct {
	SocoID           int32          `db:"soco_id" json:"socoId"`
	SocoSpofID       int32          `db:"soco_spof_id" json:"socoSpofId"`
	SocoProgEntityID int32          `db:"soco_prog_entity_id" json:"socoProgEntityId"`
	SocoStatus       sql.NullString `db:"soco_status" json:"socoStatus"`
	SocoModifiedDate sql.NullTime   `db:"soco_modified_date" json:"socoModifiedDate"`
}

func (q *Queries) CreateSpecial_offer_programs(ctx context.Context, arg CreateSpecial_offer_programsParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createSpecial_offer_programs,
		arg.SocoID,
		arg.SocoSpofID,
		arg.SocoProgEntityID,
		arg.SocoStatus,
		arg.SocoModifiedDate,
	)
	var soco_id int32
	err := row.Scan(&soco_id)
	return soco_id, err
}

const createTalentApply = `-- name: CreateTalentApply :one
INSERT INTO jobHire.talent_apply(taap_user_entity_id, taap_entity_id, taap_intro, taap_scoring, taap_modified_date, taap_status) VALUES ($1, $2, $3, $4, $5, $6)
RETURNING taap_user_entity_id
`

type CreateTalentApplyParams struct {
	TaapUserEntityID int32          `db:"taap_user_entity_id" json:"taapUserEntityId"`
	TaapEntityID     int32          `db:"taap_entity_id" json:"taapEntityId"`
	TaapIntro        sql.NullString `db:"taap_intro" json:"taapIntro"`
	TaapScoring      sql.NullInt32  `db:"taap_scoring" json:"taapScoring"`
	TaapModifiedDate sql.NullTime   `db:"taap_modified_date" json:"taapModifiedDate"`
	TaapStatus       sql.NullString `db:"taap_status" json:"taapStatus"`
}

func (q *Queries) CreateTalentApply(ctx context.Context, arg CreateTalentApplyParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createTalentApply,
		arg.TaapUserEntityID,
		arg.TaapEntityID,
		arg.TaapIntro,
		arg.TaapScoring,
		arg.TaapModifiedDate,
		arg.TaapStatus,
	)
	var taap_user_entity_id int32
	err := row.Scan(&taap_user_entity_id)
	return taap_user_entity_id, err
}

const createTalentApplyProgress = `-- name: CreateTalentApplyProgress :one
INSERT INTO jobHire.talent_apply_progress(tapr_id, taap_user_entity_id, taap_entity_id, tapr_modified_date, tapr_status) VALUES ($1, $2, $3, $4, $5)
RETURNING tapr_id
`

type CreateTalentApplyProgressParams struct {
	TaprID           int32          `db:"tapr_id" json:"taprId"`
	TaapUserEntityID int32          `db:"taap_user_entity_id" json:"taapUserEntityId"`
	TaapEntityID     int32          `db:"taap_entity_id" json:"taapEntityId"`
	TaprModifiedDate sql.NullTime   `db:"tapr_modified_date" json:"taprModifiedDate"`
	TaprStatus       sql.NullString `db:"tapr_status" json:"taprStatus"`
}

func (q *Queries) CreateTalentApplyProgress(ctx context.Context, arg CreateTalentApplyProgressParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createTalentApplyProgress,
		arg.TaprID,
		arg.TaapUserEntityID,
		arg.TaapEntityID,
		arg.TaprModifiedDate,
		arg.TaprStatus,
	)
	var tapr_id int32
	err := row.Scan(&tapr_id)
	return tapr_id, err
}

const createUsers = `-- name: CreateUsers :one

INSERT INTO users.users 
(user_entity_id, user_name, user_password, user_first_name, 
user_last_name, user_birth_date, user_email_promotion, user_demographic, 
user_modified_date, user_photo, user_current_role)
VALUES($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11)
RETURNING user_entity_id
`

type CreateUsersParams struct {
	UserEntityID       int32          `db:"user_entity_id" json:"userEntityId"`
	UserName           sql.NullString `db:"user_name" json:"userName"`
	UserPassword       sql.NullString `db:"user_password" json:"userPassword"`
	UserFirstName      sql.NullString `db:"user_first_name" json:"userFirstName"`
	UserLastName       sql.NullString `db:"user_last_name" json:"userLastName"`
	UserBirthDate      sql.NullTime   `db:"user_birth_date" json:"userBirthDate"`
	UserEmailPromotion sql.NullInt32  `db:"user_email_promotion" json:"userEmailPromotion"`
	UserDemographic    sql.NullString `db:"user_demographic" json:"userDemographic"`
	UserModifiedDate   sql.NullTime   `db:"user_modified_date" json:"userModifiedDate"`
	UserPhoto          sql.NullString `db:"user_photo" json:"userPhoto"`
	UserCurrentRole    sql.NullInt32  `db:"user_current_role" json:"userCurrentRole"`
}

func (q *Queries) CreateUsers(ctx context.Context, arg CreateUsersParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createUsers,
		arg.UserEntityID,
		arg.UserName,
		arg.UserPassword,
		arg.UserFirstName,
		arg.UserLastName,
		arg.UserBirthDate,
		arg.UserEmailPromotion,
		arg.UserDemographic,
		arg.UserModifiedDate,
		arg.UserPhoto,
		arg.UserCurrentRole,
	)
	var user_entity_id int32
	err := row.Scan(&user_entity_id)
	return user_entity_id, err
}

const createUsersPhoneNumberType = `-- name: CreateUsersPhoneNumberType :one

INSERT INTO users.phone_number_type
(ponty_code, ponty_modified_date)
VALUES($1,$2)
RETURNING ponty_code
`

type CreateUsersPhoneNumberTypeParams struct {
	PontyCode         string       `db:"ponty_code" json:"pontyCode"`
	PontyModifiedDate sql.NullTime `db:"ponty_modified_date" json:"pontyModifiedDate"`
}

func (q *Queries) CreateUsersPhoneNumberType(ctx context.Context, arg CreateUsersPhoneNumberTypeParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createUsersPhoneNumberType, arg.PontyCode, arg.PontyModifiedDate)
	var ponty_code string
	err := row.Scan(&ponty_code)
	return ponty_code, err
}

const createUsersRoles = `-- name: CreateUsersRoles :one

INSERT INTO users.users_roles
(usro_entity_id, usro_role_id, usro_modified_date)
VALUES($1,$2,$3)
RETURNING usro_entity_id
`

type CreateUsersRolesParams struct {
	UsroEntityID     int32        `db:"usro_entity_id" json:"usroEntityId"`
	UsroRoleID       int32        `db:"usro_role_id" json:"usroRoleId"`
	UsroModifiedDate sql.NullTime `db:"usro_modified_date" json:"usroModifiedDate"`
}

func (q *Queries) CreateUsersRoles(ctx context.Context, arg CreateUsersRolesParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createUsersRoles, arg.UsroEntityID, arg.UsroRoleID, arg.UsroModifiedDate)
	var usro_entity_id int32
	err := row.Scan(&usro_entity_id)
	return usro_entity_id, err
}

const createprogram_entity = `-- name: Createprogram_entity :one

INSERT INTO curriculum.program_entity (prog_entity_id, 
prog_title, 
prog_headline, 
prog_type, 
prog_learning_type, 
prog_rating, 
prog_total_trainee, 
prog_modified_date, 
prog_image, 
prog_best_seller, 
prog_price, 
prog_language, 
prog_duration, 
prog_duration_type, 
prog_tag_skill, 
prog_city_id, 
prog_cate_id, 
prog_created_by, 
prog_status) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19)
RETURNING prog_entity_id
`

type Createprogram_entityParams struct {
	ProgEntityID     int32          `db:"prog_entity_id" json:"progEntityId"`
	ProgTitle        sql.NullString `db:"prog_title" json:"progTitle"`
	ProgHeadline     sql.NullString `db:"prog_headline" json:"progHeadline"`
	ProgType         sql.NullString `db:"prog_type" json:"progType"`
	ProgLearningType sql.NullString `db:"prog_learning_type" json:"progLearningType"`
	ProgRating       sql.NullInt32  `db:"prog_rating" json:"progRating"`
	ProgTotalTrainee sql.NullInt32  `db:"prog_total_trainee" json:"progTotalTrainee"`
	ProgModifiedDate sql.NullTime   `db:"prog_modified_date" json:"progModifiedDate"`
	ProgImage        sql.NullString `db:"prog_image" json:"progImage"`
	ProgBestSeller   sql.NullString `db:"prog_best_seller" json:"progBestSeller"`
	ProgPrice        sql.NullInt32  `db:"prog_price" json:"progPrice"`
	ProgLanguage     sql.NullString `db:"prog_language" json:"progLanguage"`
	ProgDuration     sql.NullInt32  `db:"prog_duration" json:"progDuration"`
	ProgDurationType sql.NullString `db:"prog_duration_type" json:"progDurationType"`
	ProgTagSkill     sql.NullString `db:"prog_tag_skill" json:"progTagSkill"`
	ProgCityID       sql.NullInt32  `db:"prog_city_id" json:"progCityId"`
	ProgCateID       sql.NullInt32  `db:"prog_cate_id" json:"progCateId"`
	ProgCreatedBy    sql.NullInt32  `db:"prog_created_by" json:"progCreatedBy"`
	ProgStatus       sql.NullString `db:"prog_status" json:"progStatus"`
}

func (q *Queries) Createprogram_entity(ctx context.Context, arg Createprogram_entityParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createprogram_entity,
		arg.ProgEntityID,
		arg.ProgTitle,
		arg.ProgHeadline,
		arg.ProgType,
		arg.ProgLearningType,
		arg.ProgRating,
		arg.ProgTotalTrainee,
		arg.ProgModifiedDate,
		arg.ProgImage,
		arg.ProgBestSeller,
		arg.ProgPrice,
		arg.ProgLanguage,
		arg.ProgDuration,
		arg.ProgDurationType,
		arg.ProgTagSkill,
		arg.ProgCityID,
		arg.ProgCateID,
		arg.ProgCreatedBy,
		arg.ProgStatus,
	)
	var prog_entity_id int32
	err := row.Scan(&prog_entity_id)
	return prog_entity_id, err
}

const createprogram_entity_description = `-- name: Createprogram_entity_description :one

INSERT INTO curriculum.program_entity_description (pred_prog_entity_id, 
pred_item_learning, 
pred_item_include, 
pred_requirement, 
pred_description, 
pred_target_level) 
VALUES($1,$2,$3,$4,$5,$6)
RETURNING pred_prog_entity_id
`

type Createprogram_entity_descriptionParams struct {
	PredProgEntityID int32                 `db:"pred_prog_entity_id" json:"predProgEntityId"`
	PredItemLearning sql.NullString `db:"pred_item_learning" json:"predItemLearning"`
	PredItemInclude  sql.NullString `db:"pred_item_include" json:"predItemInclude"`
	PredRequirement  sql.NullString `db:"pred_requirement" json:"predRequirement"`
	PredDescription  sql.NullString `db:"pred_description" json:"predDescription"`
	PredTargetLevel  sql.NullString `db:"pred_target_level" json:"predTargetLevel"`
}

func (q *Queries) Createprogram_entity_description(ctx context.Context, arg Createprogram_entity_descriptionParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createprogram_entity_description,
		arg.PredProgEntityID,
		arg.PredItemLearning,
		arg.PredItemInclude,
		arg.PredRequirement,
		arg.PredDescription,
		arg.PredTargetLevel,
	)
	var pred_prog_entity_id int32
	err := row.Scan(&pred_prog_entity_id)
	return pred_prog_entity_id, err
}

const createprogram_reviews = `-- name: Createprogram_reviews :one

INSERT INTO curriculum.program_reviews (prow_user_entity_id, 
prow_prog_entity_id, 
prow_review, 
prow_rating, 
prow_modified_date) 

VALUES($1,$2,$3,$4,$5)
RETURNING prow_user_entity_id
`

type Createprogram_reviewsParams struct {
	ProwUserEntityID int32          `db:"prow_user_entity_id" json:"prowUserEntityId"`
	ProwProgEntityID int32          `db:"prow_prog_entity_id" json:"prowProgEntityId"`
	ProwReview       sql.NullString `db:"prow_review" json:"prowReview"`
	ProwRating       sql.NullInt32  `db:"prow_rating" json:"prowRating"`
	ProwModifiedDate sql.NullTime   `db:"prow_modified_date" json:"prowModifiedDate"`
}

func (q *Queries) Createprogram_reviews(ctx context.Context, arg Createprogram_reviewsParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createprogram_reviews,
		arg.ProwUserEntityID,
		arg.ProwProgEntityID,
		arg.ProwReview,
		arg.ProwRating,
		arg.ProwModifiedDate,
	)
	var prow_user_entity_id int32
	err := row.Scan(&prow_user_entity_id)
	return prow_user_entity_id, err
}

const createsection_detail = `-- name: Createsection_detail :one

INSERT INTO curriculum.section_detail (secd_id, 
secd_title, 
secd_preview, 
secd_score, 
secd_note, 
secd_minute, 
secd_modified_date, 
secd_sect_id)
VALUES($1,$2,$3,$4,$5,$6,$7,$8)
RETURNING secd_id
`

type Createsection_detailParams struct {
	SecdID           int32          `db:"secd_id" json:"secdId"`
	SecdTitle        sql.NullString `db:"secd_title" json:"secdTitle"`
	SecdPreview      sql.NullString `db:"secd_preview" json:"secdPreview"`
	SecdScore        sql.NullInt32  `db:"secd_score" json:"secdScore"`
	SecdNote         sql.NullString `db:"secd_note" json:"secdNote"`
	SecdMinute       sql.NullInt32  `db:"secd_minute" json:"secdMinute"`
	SecdModifiedDate sql.NullTime   `db:"secd_modified_date" json:"secdModifiedDate"`
	SecdSectID       sql.NullInt32  `db:"secd_sect_id" json:"secdSectId"`
}

func (q *Queries) Createsection_detail(ctx context.Context, arg Createsection_detailParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createsection_detail,
		arg.SecdID,
		arg.SecdTitle,
		arg.SecdPreview,
		arg.SecdScore,
		arg.SecdNote,
		arg.SecdMinute,
		arg.SecdModifiedDate,
		arg.SecdSectID,
	)
	var secd_id int32
	err := row.Scan(&secd_id)
	return secd_id, err
}

const createsection_detail_material = `-- name: Createsection_detail_material :one

INSERT INTO curriculum.section_detail_material (sedm_id, 
sedm_filename, 
sedm_filesize, 
sedm_filetype, 
sedm_filelink, 
sedm_modified_date, 
sedm_secd_id)

VALUES($1,$2,$3,$4,$5,$6,$7)
RETURNING sedm_id
`

type Createsection_detail_materialParams struct {
	SedmID           int32          `db:"sedm_id" json:"sedmId"`
	SedmFilename     sql.NullString `db:"sedm_filename" json:"sedmFilename"`
	SedmFilesize     sql.NullInt32  `db:"sedm_filesize" json:"sedmFilesize"`
	SedmFiletype     sql.NullString `db:"sedm_filetype" json:"sedmFiletype"`
	SedmFilelink     sql.NullString `db:"sedm_filelink" json:"sedmFilelink"`
	SedmModifiedDate sql.NullTime   `db:"sedm_modified_date" json:"sedmModifiedDate"`
	SedmSecdID       sql.NullInt32  `db:"sedm_secd_id" json:"sedmSecdId"`
}

func (q *Queries) Createsection_detail_material(ctx context.Context, arg Createsection_detail_materialParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createsection_detail_material,
		arg.SedmID,
		arg.SedmFilename,
		arg.SedmFilesize,
		arg.SedmFiletype,
		arg.SedmFilelink,
		arg.SedmModifiedDate,
		arg.SedmSecdID,
	)
	var sedm_id int32
	err := row.Scan(&sedm_id)
	return sedm_id, err
}

const createsections = `-- name: Createsections :one

INSERT INTO curriculum.sections (sect_id, 
sect_prog_entity_id, 
sect_title, 
sect_description, 
sect_total_section, 
sect_total_lecture, 
sect_total_minute, 
sect_modified_date)
VALUES($1,$2,$3,$4,$5,$6,$7,$8)
RETURNING sect_id
`

type CreatesectionsParams struct {
	SectID           int32          `db:"sect_id" json:"sectId"`
	SectProgEntityID int32          `db:"sect_prog_entity_id" json:"sectProgEntityId"`
	SectTitle        sql.NullString `db:"sect_title" json:"sectTitle"`
	SectDescription  sql.NullString `db:"sect_description" json:"sectDescription"`
	SectTotalSection sql.NullInt32  `db:"sect_total_section" json:"sectTotalSection"`
	SectTotalLecture sql.NullInt32  `db:"sect_total_lecture" json:"sectTotalLecture"`
	SectTotalMinute  sql.NullInt32  `db:"sect_total_minute" json:"sectTotalMinute"`
	SectModifiedDate sql.NullTime   `db:"sect_modified_date" json:"sectModifiedDate"`
}

func (q *Queries) Createsections(ctx context.Context, arg CreatesectionsParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createsections,
		arg.SectID,
		arg.SectProgEntityID,
		arg.SectTitle,
		arg.SectDescription,
		arg.SectTotalSection,
		arg.SectTotalLecture,
		arg.SectTotalMinute,
		arg.SectModifiedDate,
	)
	var sect_id int32
	err := row.Scan(&sect_id)
	return sect_id, err
}

const deleteAddress = `-- name: DeleteAddress :exec
DELETE FROM users.users_address
WHERE etad_addr_id = $1
`

func (q *Queries) DeleteAddress(ctx context.Context, etadAddrID int32) error {
	_, err := q.db.ExecContext(ctx, deleteAddress, etadAddrID)
	return err
}

const deleteBatch = `-- name: DeleteBatch :exec
DELETE  FROM bootcamp.batch
WHERE batch_id = $1
`

func (q *Queries) DeleteBatch(ctx context.Context, batchID int32) error {
	_, err := q.db.ExecContext(ctx, deleteBatch, batchID)
	return err
}

const deleteBatchTrainee = `-- name: DeleteBatchTrainee :exec
DELETE FROM bootcamp.batch_trainee
WHERE batr_id = $1
`

func (q *Queries) DeleteBatchTrainee(ctx context.Context, batrID int32) error {
	_, err := q.db.ExecContext(ctx, deleteBatchTrainee, batrID)
	return err
}

const deleteBatchTraineeEvaluation = `-- name: DeleteBatchTraineeEvaluation :exec
DELETE FROM bootcamp.batch_trainee_evaluation
WHERE btev_id = $1
`

func (q *Queries) DeleteBatchTraineeEvaluation(ctx context.Context, btevID int32) error {
	_, err := q.db.ExecContext(ctx, deleteBatchTraineeEvaluation, btevID)
	return err
}

const deleteBusinessEntity = `-- name: DeleteBusinessEntity :exec
DELETE FROM users.business_entity
WHERE entity_id = $1
`

func (q *Queries) DeleteBusinessEntity(ctx context.Context, entityID int32) error {
	_, err := q.db.ExecContext(ctx, deleteBusinessEntity, entityID)
	return err
}

const deleteCart_item = `-- name: DeleteCart_item :exec
DELETE FROM sales.cart_items
WHERE cait_id = $1
`

func (q *Queries) DeleteCart_item(ctx context.Context, caitID int32) error {
	_, err := q.db.ExecContext(ctx, deleteCart_item, caitID)
	return err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM jobHire.job_category
WHERE joca_id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, jocaID int32) error {
	_, err := q.db.ExecContext(ctx, deleteCategory, jocaID)
	return err
}

const deleteClient = `-- name: DeleteClient :exec
DELETE FROM jobHire.client
WHERE clit_id = $1
`

func (q *Queries) DeleteClient(ctx context.Context, clitID int32) error {
	_, err := q.db.ExecContext(ctx, deleteClient, clitID)
	return err
}

const deleteClientContract = `-- name: DeleteClientContract :exec
DELETE FROM hr.employee_client_contract
WHERE ecco_id = $1
`

func (q *Queries) DeleteClientContract(ctx context.Context, eccoID int32) error {
	_, err := q.db.ExecContext(ctx, deleteClientContract, eccoID)
	return err
}

const deleteDepartment = `-- name: DeleteDepartment :exec
DELETE FROM hr.department
WHERE dept_id = $1
`

func (q *Queries) DeleteDepartment(ctx context.Context, deptID int32) error {
	_, err := q.db.ExecContext(ctx, deleteDepartment, deptID)
	return err
}

const deleteEducation = `-- name: DeleteEducation :exec
DELETE FROM users.users_education
WHERE usdu_id = $1
`

func (q *Queries) DeleteEducation(ctx context.Context, usduID int32) error {
	_, err := q.db.ExecContext(ctx, deleteEducation, usduID)
	return err
}

const deleteEmail = `-- name: DeleteEmail :exec
DELETE FROM users.users_email
WHERE pmail_id = $1
`

func (q *Queries) DeleteEmail(ctx context.Context, pmailID int32) error {
	_, err := q.db.ExecContext(ctx, deleteEmail, pmailID)
	return err
}

const deleteEmployee = `-- name: DeleteEmployee :exec
DELETE FROM hr.employee
WHERE emp_entity_id = $1
`

func (q *Queries) DeleteEmployee(ctx context.Context, empEntityID int32) error {
	_, err := q.db.ExecContext(ctx, deleteEmployee, empEntityID)
	return err
}

const deleteEmployeeDepartmentHistory = `-- name: DeleteEmployeeDepartmentHistory :exec
DELETE FROM hr.employee_department_history
WHERE edhi_id = $1
`

func (q *Queries) DeleteEmployeeDepartmentHistory(ctx context.Context, edhiID int32) error {
	_, err := q.db.ExecContext(ctx, deleteEmployeeDepartmentHistory, edhiID)
	return err
}

const deleteEmployeeRange = `-- name: DeleteEmployeeRange :exec
DELETE FROM jobHire.employee_range
WHERE emra_id = $1
`

func (q *Queries) DeleteEmployeeRange(ctx context.Context, emraID int32) error {
	_, err := q.db.ExecContext(ctx, deleteEmployeeRange, emraID)
	return err
}

const deleteExperience = `-- name: DeleteExperience :exec
DELETE FROM users.users_experiences
WHERE usex_id = $1
`

func (q *Queries) DeleteExperience(ctx context.Context, usexID int32) error {
	_, err := q.db.ExecContext(ctx, deleteExperience, usexID)
	return err
}

const deleteExperienceSkill = `-- name: DeleteExperienceSkill :exec
DELETE FROM users.users_experiences_skill
WHERE uesk_usex_id = $1
`

func (q *Queries) DeleteExperienceSkill(ctx context.Context, ueskUsexID int32) error {
	_, err := q.db.ExecContext(ctx, deleteExperienceSkill, ueskUsexID)
	return err
}

const deleteInstructorProgram = `-- name: DeleteInstructorProgram :exec
DELETE FROM bootcamp.instructor_programs
WHERE batch_id = $1
`

func (q *Queries) DeleteInstructorProgram(ctx context.Context, batchID int32) error {
	_, err := q.db.ExecContext(ctx, deleteInstructorProgram, batchID)
	return err
}

const deleteJobPost = `-- name: DeleteJobPost :exec
DELETE FROM jobHire.job_post
WHERE jopo_entity_id = $1
`

func (q *Queries) DeleteJobPost(ctx context.Context, jopoEntityID int32) error {
	_, err := q.db.ExecContext(ctx, deleteJobPost, jopoEntityID)
	return err
}

const deleteJobPostDesc = `-- name: DeleteJobPostDesc :exec
DELETE FROM jobHire.job_post_desc
WHERE jopo_entity_id = $1
`

func (q *Queries) DeleteJobPostDesc(ctx context.Context, jopoEntityID int32) error {
	_, err := q.db.ExecContext(ctx, deleteJobPostDesc, jopoEntityID)
	return err
}

const deleteLicense = `-- name: DeleteLicense :exec
DELETE FROM users.users_license
WHERE usli_id = $1
`

func (q *Queries) DeleteLicense(ctx context.Context, usliID int32) error {
	_, err := q.db.ExecContext(ctx, deleteLicense, usliID)
	return err
}

const deleteMasterAddress = `-- name: DeleteMasterAddress :exec
DELETE FROM master.address
WHERE addr_id = $1
`

func (q *Queries) DeleteMasterAddress(ctx context.Context, addrID int32) error {
	_, err := q.db.ExecContext(ctx, deleteMasterAddress, addrID)
	return err
}

const deleteMasterCity = `-- name: DeleteMasterCity :exec
DELETE FROM master.city
WHERE city_id = $1
`

func (q *Queries) DeleteMasterCity(ctx context.Context, cityID int32) error {
	_, err := q.db.ExecContext(ctx, deleteMasterCity, cityID)
	return err
}

const deleteMasterJobRole = `-- name: DeleteMasterJobRole :exec
DELETE FROM master.job_role
WHERE joro_id = $1
`

func (q *Queries) DeleteMasterJobRole(ctx context.Context, joroID int32) error {
	_, err := q.db.ExecContext(ctx, deleteMasterJobRole, joroID)
	return err
}

const deleteMasterWorkingType = `-- name: DeleteMasterWorkingType :exec
DELETE FROM master.working_type
WHERE woty_code = $1
`

func (q *Queries) DeleteMasterWorkingType(ctx context.Context, wotyCode string) error {
	_, err := q.db.ExecContext(ctx, deleteMasterWorkingType, wotyCode)
	return err
}

const deleteMedia = `-- name: DeleteMedia :exec
DELETE FROM users.users_media
WHERE usme_id = $1
`

func (q *Queries) DeleteMedia(ctx context.Context, usmeID int32) error {
	_, err := q.db.ExecContext(ctx, deleteMedia, usmeID)
	return err
}

const deletePayHistory = `-- name: DeletePayHistory :exec
DELETE FROM hr.employee_pay_history
WHERE ephi_entity_id = $1
`

func (q *Queries) DeletePayHistory(ctx context.Context, ephiEntityID int32) error {
	_, err := q.db.ExecContext(ctx, deletePayHistory, ephiEntityID)
	return err
}

const deletePaymentBank = `-- name: DeletePaymentBank :exec

DELETE FROM payment.bank WHERE bank_entity_id = $1
`

func (q *Queries) DeletePaymentBank(ctx context.Context, bankEntityID int32) error {
	_, err := q.db.ExecContext(ctx, deletePaymentBank, bankEntityID)
	return err
}

const deletePaymentFintech = `-- name: DeletePaymentFintech :exec

DELETE FROM payment.fintech WHERE fint_entity_id = $1
`

func (q *Queries) DeletePaymentFintech(ctx context.Context, fintEntityID int32) error {
	_, err := q.db.ExecContext(ctx, deletePaymentFintech, fintEntityID)
	return err
}

const deletePaymentTransaction_payment = `-- name: DeletePaymentTransaction_payment :exec

DELETE FROM payment.transaction_payment WHERE trpa_id = $1
`

func (q *Queries) DeletePaymentTransaction_payment(ctx context.Context, trpaID int32) error {
	_, err := q.db.ExecContext(ctx, deletePaymentTransaction_payment, trpaID)
	return err
}

const deletePaymentUsers_account = `-- name: DeletePaymentUsers_account :exec

DELETE FROM payment.users_account WHERE usac_bank_entity_id = $1
`

func (q *Queries) DeletePaymentUsers_account(ctx context.Context, usacBankEntityID int32) error {
	_, err := q.db.ExecContext(ctx, deletePaymentUsers_account, usacBankEntityID)
	return err
}

const deletePhones = `-- name: DeletePhones :exec
DELETE FROM users.users_phones
WHERE uspo_entity_id = $1
`

func (q *Queries) DeletePhones(ctx context.Context, uspoEntityID int32) error {
	_, err := q.db.ExecContext(ctx, deletePhones, uspoEntityID)
	return err
}

const deleteProgramApply = `-- name: DeleteProgramApply :exec
DELETE FROM bootcamp.program_apply
WHERE prap_user_entity_id = $1
`

func (q *Queries) DeleteProgramApply(ctx context.Context, prapUserEntityID int32) error {
	_, err := q.db.ExecContext(ctx, deleteProgramApply, prapUserEntityID)
	return err
}

const deleteProgramApplyProgress = `-- name: DeleteProgramApplyProgress :exec
DELETE FROM bootcamp.program_apply_progress
WHERE parog_id = $1
`

func (q *Queries) DeleteProgramApplyProgress(ctx context.Context, parogID int32) error {
	_, err := q.db.ExecContext(ctx, deleteProgramApplyProgress, parogID)
	return err
}

const deleteRoles = `-- name: DeleteRoles :exec
DELETE FROM users.roles
WHERE role_id = $1
`

func (q *Queries) DeleteRoles(ctx context.Context, roleID int32) error {
	_, err := q.db.ExecContext(ctx, deleteRoles, roleID)
	return err
}

const deleteSales_order_detail = `-- name: DeleteSales_order_detail :exec
DELETE FROM sales.sales_order_detail
WHERE sode_id = $1
`

func (q *Queries) DeleteSales_order_detail(ctx context.Context, sodeID int32) error {
	_, err := q.db.ExecContext(ctx, deleteSales_order_detail, sodeID)
	return err
}

const deleteSales_order_header = `-- name: DeleteSales_order_header :exec
DELETE FROM sales.sales_order_header
WHERE sohe_id = $1
`

func (q *Queries) DeleteSales_order_header(ctx context.Context, soheID int32) error {
	_, err := q.db.ExecContext(ctx, deleteSales_order_header, soheID)
	return err
}

const deleteSales_special_offer = `-- name: DeleteSales_special_offer :exec
DELETE FROM sales.special_offer
WHERE spof_id = $1
`

func (q *Queries) DeleteSales_special_offer(ctx context.Context, spofID int32) error {
	_, err := q.db.ExecContext(ctx, deleteSales_special_offer, spofID)
	return err
}

const deleteSkill = `-- name: DeleteSkill :exec
DELETE FROM users.users_skill
WHERE uski_id = $1
`

func (q *Queries) DeleteSkill(ctx context.Context, uskiID int32) error {
	_, err := q.db.ExecContext(ctx, deleteSkill, uskiID)
	return err
}

const deleteSpecial_offer_programs = `-- name: DeleteSpecial_offer_programs :exec
DELETE FROM sales.special_offer_programs
WHERE soco_id = $1
`

func (q *Queries) DeleteSpecial_offer_programs(ctx context.Context, socoID int32) error {
	_, err := q.db.ExecContext(ctx, deleteSpecial_offer_programs, socoID)
	return err
}

const deleteTalentApply = `-- name: DeleteTalentApply :exec
DELETE FROM jobHire.talent_apply
WHERE taap_user_entity_id = $1
`

func (q *Queries) DeleteTalentApply(ctx context.Context, taapUserEntityID int32) error {
	_, err := q.db.ExecContext(ctx, deleteTalentApply, taapUserEntityID)
	return err
}

const deleteTalentApplyProgress = `-- name: DeleteTalentApplyProgress :exec
DELETE FROM jobHire.talent_apply_progress
WHERE tapr_id = $1
`

func (q *Queries) DeleteTalentApplyProgress(ctx context.Context, taprID int32) error {
	_, err := q.db.ExecContext(ctx, deleteTalentApplyProgress, taprID)
	return err
}

const deleteUsers = `-- name: DeleteUsers :exec
DELETE FROM users.users
WHERE user_entity_id = $1
`

func (q *Queries) DeleteUsers(ctx context.Context, userEntityID int32) error {
	_, err := q.db.ExecContext(ctx, deleteUsers, userEntityID)
	return err
}

const deleteUsersPhoneNumberType = `-- name: DeleteUsersPhoneNumberType :exec
DELETE FROM users.phone_number_type
WHERE ponty_code = $1
`

func (q *Queries) DeleteUsersPhoneNumberType(ctx context.Context, pontyCode string) error {
	_, err := q.db.ExecContext(ctx, deleteUsersPhoneNumberType, pontyCode)
	return err
}

const deleteUsersRoles = `-- name: DeleteUsersRoles :exec
DELETE FROM users.users_roles
WHERE usro_entity_id = $1
`

func (q *Queries) DeleteUsersRoles(ctx context.Context, usroEntityID int32) error {
	_, err := q.db.ExecContext(ctx, deleteUsersRoles, usroEntityID)
	return err
}

const deleteprogram_entity = `-- name: Deleteprogram_entity :exec
DELETE FROM curriculum.program_entity
WHERE prog_entity_id = $1
`

func (q *Queries) Deleteprogram_entity(ctx context.Context, progEntityID int32) error {
	_, err := q.db.ExecContext(ctx, deleteprogram_entity, progEntityID)
	return err
}

const deleteprogram_entity_description = `-- name: Deleteprogram_entity_description :exec
DELETE FROM curriculum.program_entity_description
WHERE pred_prog_entity_id = $1
`

func (q *Queries) Deleteprogram_entity_description(ctx context.Context, predProgEntityID int32) error {
	_, err := q.db.ExecContext(ctx, deleteprogram_entity_description, predProgEntityID)
	return err
}

const deleteprogram_reviews = `-- name: Deleteprogram_reviews :exec
DELETE FROM curriculum.program_reviews
WHERE prow_user_entity_id = $1
`

func (q *Queries) Deleteprogram_reviews(ctx context.Context, prowUserEntityID int32) error {
	_, err := q.db.ExecContext(ctx, deleteprogram_reviews, prowUserEntityID)
	return err
}

const deletesection_detail = `-- name: Deletesection_detail :exec
DELETE FROM curriculum.section_detail
WHERE secd_id = $1
`

func (q *Queries) Deletesection_detail(ctx context.Context, secdID int32) error {
	_, err := q.db.ExecContext(ctx, deletesection_detail, secdID)
	return err
}

const deletesection_detail_material = `-- name: Deletesection_detail_material :exec
DELETE FROM curriculum.section_detail_material
WHERE sedm_id = $1
`

func (q *Queries) Deletesection_detail_material(ctx context.Context, sedmID int32) error {
	_, err := q.db.ExecContext(ctx, deletesection_detail_material, sedmID)
	return err
}

const deletesections = `-- name: Deletesections :exec
DELETE FROM curriculum.sections
WHERE sect_id = $1
`

func (q *Queries) Deletesections(ctx context.Context, sectID int32) error {
	_, err := q.db.ExecContext(ctx, deletesections, sectID)
	return err
}

const getAddress = `-- name: GetAddress :one

SELECT etad_addr_id, etad_modified_date, etad_entity_id, etad_adty_id FROM users.users_address
WHERE etad_addr_id = $1
`

// Users Addrress
func (q *Queries) GetAddress(ctx context.Context, etadAddrID int32) (UsersUsersAddress, error) {
	row := q.db.QueryRowContext(ctx, getAddress, etadAddrID)
	var i UsersUsersAddress
	err := row.Scan(
		&i.EtadAddrID,
		&i.EtadModifiedDate,
		&i.EtadEntityID,
		&i.EtadAdtyID,
	)
	return i, err
}

const getBatch = `-- name: GetBatch :one
SELECT batch_id, batch_entity_id, batch_name, batch_description, batch_start_date, batch_end_date, batch_reason, batch_type, batch_modified_date, batch_status, batch_pic_id FROM bootcamp.batch
WHERE batch_id = $1
`

func (q *Queries) GetBatch(ctx context.Context, batchID int32) (BootcampBatch, error) {
	row := q.db.QueryRowContext(ctx, getBatch, batchID)
	var i BootcampBatch
	err := row.Scan(
		&i.BatchID,
		&i.BatchEntityID,
		&i.BatchName,
		&i.BatchDescription,
		&i.BatchStartDate,
		&i.BatchEndDate,
		&i.BatchReason,
		&i.BatchType,
		&i.BatchModifiedDate,
		&i.BatchStatus,
		&i.BatchPicID,
	)
	return i, err
}

const getBatchTrainee = `-- name: GetBatchTrainee :one
SELECT batr_id, batr_status, batr_certificated, batre_certificate_link, batr_access_token, batr_access_grant, batr_review, batr_total_score, batr_modified_date, batr_trainee_entity_id, batr_batch_id FROM bootcamp.batch_trainee
WHERE batr_id = $1
`

func (q *Queries) GetBatchTrainee(ctx context.Context, batrID int32) (BootcampBatchTrainee, error) {
	row := q.db.QueryRowContext(ctx, getBatchTrainee, batrID)
	var i BootcampBatchTrainee
	err := row.Scan(
		&i.BatrID,
		&i.BatrStatus,
		&i.BatrCertificated,
		&i.BatreCertificateLink,
		&i.BatrAccessToken,
		&i.BatrAccessGrant,
		&i.BatrReview,
		&i.BatrTotalScore,
		&i.BatrModifiedDate,
		&i.BatrTraineeEntityID,
		&i.BatrBatchID,
	)
	return i, err
}

const getBatchTraineeEvaluation = `-- name: GetBatchTraineeEvaluation :one
SELECT btev_id, btev_type, btev_header, btev_section, btev_skill, btev_week, btev_skor, btev_note, btev_modified_date, btev_batch_id, btev_trainee_entity_id FROM bootcamp.batch_trainee_evaluation
WHERE btev_id = $1
`

func (q *Queries) GetBatchTraineeEvaluation(ctx context.Context, btevID int32) (BootcampBatchTraineeEvaluation, error) {
	row := q.db.QueryRowContext(ctx, getBatchTraineeEvaluation, btevID)
	var i BootcampBatchTraineeEvaluation
	err := row.Scan(
		&i.BtevID,
		&i.BtevType,
		&i.BtevHeader,
		&i.BtevSection,
		&i.BtevSkill,
		&i.BtevWeek,
		&i.BtevSkor,
		&i.BtevNote,
		&i.BtevModifiedDate,
		&i.BtevBatchID,
		&i.BtevTraineeEntityID,
	)
	return i, err
}

const getBusinessEntity = `-- name: GetBusinessEntity :one
SELECT entity_id FROM users.business_entity
WHERE entity_id = $1
`

func (q *Queries) GetBusinessEntity(ctx context.Context, entityID int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, getBusinessEntity, entityID)
	var entity_id int32
	err := row.Scan(&entity_id)
	return entity_id, err
}

const getCategory = `-- name: GetCategory :one
SELECT joca_id, joca_name, joca_modified_date FROM jobHire.job_category
WHERE joca_id = $1
`

func (q *Queries) GetCategory(ctx context.Context, jocaID int32) (JobhireJobCategory, error) {
	row := q.db.QueryRowContext(ctx, getCategory, jocaID)
	var i JobhireJobCategory
	err := row.Scan(&i.JocaID, &i.JocaName, &i.JocaModifiedDate)
	return i, err
}

const getClient = `-- name: GetClient :one
SELECT clit_id, clit_name, clit_about, clit_modified_date, clit_addr_id, clit_emra_id FROM jobHire.client
WHERE clit_id = $1
`

func (q *Queries) GetClient(ctx context.Context, clitID int32) (JobhireClient, error) {
	row := q.db.QueryRowContext(ctx, getClient, clitID)
	var i JobhireClient
	err := row.Scan(
		&i.ClitID,
		&i.ClitName,
		&i.ClitAbout,
		&i.ClitModifiedDate,
		&i.ClitAddrID,
		&i.ClitEmraID,
	)
	return i, err
}

const getClientContract = `-- name: GetClientContract :one

SELECT ecco_id, ecco_entity_id, ecco_contract_no, ecco_contract_date, ecco_start_date, ecco_end_date, ecco_notes, ecco_modified_date, ecco_media_link, ecco_joty_id, ecco_account_manager, ecco_clit_id, ecco_status FROM hr.employee_client_contract
WHERE ecco_id = $1
`

// hr.employee_client_contract
func (q *Queries) GetClientContract(ctx context.Context, eccoID int32) (HrEmployeeClientContract, error) {
	row := q.db.QueryRowContext(ctx, getClientContract, eccoID)
	var i HrEmployeeClientContract
	err := row.Scan(
		&i.EccoID,
		&i.EccoEntityID,
		&i.EccoContractNo,
		&i.EccoContractDate,
		&i.EccoStartDate,
		&i.EccoEndDate,
		&i.EccoNotes,
		&i.EccoModifiedDate,
		&i.EccoMediaLink,
		&i.EccoJotyID,
		&i.EccoAccountManager,
		&i.EccoClitID,
		&i.EccoStatus,
	)
	return i, err
}

const getDepartment = `-- name: GetDepartment :one

SELECT dept_id, dept_name, dept_modified_date FROM hr.department
WHERE dept_id = $1
`

// hr.department
func (q *Queries) GetDepartment(ctx context.Context, deptID int32) (HrDepartment, error) {
	row := q.db.QueryRowContext(ctx, getDepartment, deptID)
	var i HrDepartment
	err := row.Scan(&i.DeptID, &i.DeptName, &i.DeptModifiedDate)
	return i, err
}

const getEducation = `-- name: GetEducation :one

SELECT usdu_id, usdu_entity_id, usdu_school, usdu_degree, usdu_field_study, usdu_graduate_year, usdu_start_date, usdu_end_date, usdu_grade, usdu_activities, usdu_description, usdu_modified_date FROM users.users_education
WHERE usdu_id = $1
`

// Users Education
func (q *Queries) GetEducation(ctx context.Context, usduID int32) (UsersUsersEducation, error) {
	row := q.db.QueryRowContext(ctx, getEducation, usduID)
	var i UsersUsersEducation
	err := row.Scan(
		&i.UsduID,
		&i.UsduEntityID,
		&i.UsduSchool,
		&i.UsduDegree,
		&i.UsduFieldStudy,
		&i.UsduGraduateYear,
		&i.UsduStartDate,
		&i.UsduEndDate,
		&i.UsduGrade,
		&i.UsduActivities,
		&i.UsduDescription,
		&i.UsduModifiedDate,
	)
	return i, err
}

const getEmail = `-- name: GetEmail :one

SELECT pmail_entity_id, pmail_id, pmail_address, pmail_modified_date FROM users.users_email
WHERE pmail_id = $1
`

// Users Email
func (q *Queries) GetEmail(ctx context.Context, pmailID int32) (UsersUsersEmail, error) {
	row := q.db.QueryRowContext(ctx, getEmail, pmailID)
	var i UsersUsersEmail
	err := row.Scan(
		&i.PmailEntityID,
		&i.PmailID,
		&i.PmailAddress,
		&i.PmailModifiedDate,
	)
	return i, err
}

const getEmployee = `-- name: GetEmployee :one

SELECT emp_entity_id, emp_emp_number, emp_national_id, emp_birth_date, emp_marital_status, emp_gender, emp_hire_date, emp_salaried_flag, emp_vacation_hours, emp_sickleave_hours, emp_current_flag, emp_modified_date, emp_type, emp_joro_id, emp_emp_entity_id FROM hr.employee
WHERE emp_entity_id = $1
`

// hr.employee
func (q *Queries) GetEmployee(ctx context.Context, empEntityID int32) (HrEmployee, error) {
	row := q.db.QueryRowContext(ctx, getEmployee, empEntityID)
	var i HrEmployee
	err := row.Scan(
		&i.EmpEntityID,
		&i.EmpEmpNumber,
		&i.EmpNationalID,
		&i.EmpBirthDate,
		&i.EmpMaritalStatus,
		&i.EmpGender,
		&i.EmpHireDate,
		&i.EmpSalariedFlag,
		&i.EmpVacationHours,
		&i.EmpSickleaveHours,
		&i.EmpCurrentFlag,
		&i.EmpModifiedDate,
		&i.EmpType,
		&i.EmpJoroID,
		&i.EmpEmpEntityID,
	)
	return i, err
}

const getEmployeeDepartmentHistory = `-- name: GetEmployeeDepartmentHistory :one

SELECT edhi_id, edhi_entity_id, edhi_start_date, edhi_end_date, edhi_modified_date, edhi_dept_id FROM hr.employee_department_history
WHERE edhi_id = $1
`

// hr.employee_department_history
func (q *Queries) GetEmployeeDepartmentHistory(ctx context.Context, edhiID int32) (HrEmployeeDepartmentHistory, error) {
	row := q.db.QueryRowContext(ctx, getEmployeeDepartmentHistory, edhiID)
	var i HrEmployeeDepartmentHistory
	err := row.Scan(
		&i.EdhiID,
		&i.EdhiEntityID,
		&i.EdhiStartDate,
		&i.EdhiEndDate,
		&i.EdhiModifiedDate,
		&i.EdhiDeptID,
	)
	return i, err
}

const getEmployeeRange = `-- name: GetEmployeeRange :one
SELECT emra_id, emra_range_min, emra_range_max, emra_modified_date FROM jobHire.employee_range
WHERE emra_id = $1
`

func (q *Queries) GetEmployeeRange(ctx context.Context, emraID int32) (JobhireEmployeeRange, error) {
	row := q.db.QueryRowContext(ctx, getEmployeeRange, emraID)
	var i JobhireEmployeeRange
	err := row.Scan(
		&i.EmraID,
		&i.EmraRangeMin,
		&i.EmraRangeMax,
		&i.EmraModifiedDate,
	)
	return i, err
}

const getExperience = `-- name: GetExperience :one

SELECT usex_id, usex_entity_id, usex_title, usex_profile_headline, usex_employment_type, usex_company_name, usex_is_current, usex_start_date, usex_end_date, usex_industry, usex_description, usex_experience_type, usex_city_id FROM users.users_experiences
WHERE usex_id = $1
`

// Users Experience
func (q *Queries) GetExperience(ctx context.Context, usexID int32) (UsersUsersExperience, error) {
	row := q.db.QueryRowContext(ctx, getExperience, usexID)
	var i UsersUsersExperience
	err := row.Scan(
		&i.UsexID,
		&i.UsexEntityID,
		&i.UsexTitle,
		&i.UsexProfileHeadline,
		&i.UsexEmploymentType,
		&i.UsexCompanyName,
		&i.UsexIsCurrent,
		&i.UsexStartDate,
		&i.UsexEndDate,
		&i.UsexIndustry,
		&i.UsexDescription,
		&i.UsexExperienceType,
		&i.UsexCityID,
	)
	return i, err
}

const getExperienceSkill = `-- name: GetExperienceSkill :one

SELECT uesk_usex_id, uesk_uski_id FROM users.users_experiences_skill
WHERE uesk_usex_id = $1
`

// Users Experience Skill
func (q *Queries) GetExperienceSkill(ctx context.Context, ueskUsexID int32) (UsersUsersExperiencesSkill, error) {
	row := q.db.QueryRowContext(ctx, getExperienceSkill, ueskUsexID)
	var i UsersUsersExperiencesSkill
	err := row.Scan(&i.UeskUsexID, &i.UeskUskiID)
	return i, err
}

const getInstructorProgram = `-- name: GetInstructorProgram :one
SELECT batch_id, inpro_entity_id, inpro_emp_entity_id, inpro_modified_date FROM bootcamp.instructor_programs
WHERE batch_id = $1
`

func (q *Queries) GetInstructorProgram(ctx context.Context, batchID int32) (BootcampInstructorProgram, error) {
	row := q.db.QueryRowContext(ctx, getInstructorProgram, batchID)
	var i BootcampInstructorProgram
	err := row.Scan(
		&i.BatchID,
		&i.InproEntityID,
		&i.InproEmpEntityID,
		&i.InproModifiedDate,
	)
	return i, err
}

const getJobPost = `-- name: GetJobPost :one
SELECT jopo_entity_id, jopo_number, jopo_title, jopo_start_date, jopo_end_date, jopo_min_salary, jopo_max_salary, jopo_min_experience, jopo_max_experience, jopo_primary_skill, jopo_secondary_skill, jopo_publish_date, jopo_modified_date, jopo_emp_entity_id, jopo_clit_id, jopo_joro_id, jopo_joty_id, jopo_joca_id, jopo_addr_id, jopo_work_code, jopo_edu_code, jopo_indu_code, jopo_status FROM jobHire.job_post
WHERE jopo_entity_id = $1
`

func (q *Queries) GetJobPost(ctx context.Context, jopoEntityID int32) (JobhireJobPost, error) {
	row := q.db.QueryRowContext(ctx, getJobPost, jopoEntityID)
	var i JobhireJobPost
	err := row.Scan(
		&i.JopoEntityID,
		&i.JopoNumber,
		&i.JopoTitle,
		&i.JopoStartDate,
		&i.JopoEndDate,
		&i.JopoMinSalary,
		&i.JopoMaxSalary,
		&i.JopoMinExperience,
		&i.JopoMaxExperience,
		&i.JopoPrimarySkill,
		&i.JopoSecondarySkill,
		&i.JopoPublishDate,
		&i.JopoModifiedDate,
		&i.JopoEmpEntityID,
		&i.JopoClitID,
		&i.JopoJoroID,
		&i.JopoJotyID,
		&i.JopoJocaID,
		&i.JopoAddrID,
		&i.JopoWorkCode,
		&i.JopoEduCode,
		&i.JopoInduCode,
		&i.JopoStatus,
	)
	return i, err
}

const getJobPostDesc = `-- name: GetJobPostDesc :one
SELECT jopo_entity_id, jopo_description, jopo_responsibility, jopo_target, jopo_benefit FROM jobHire.job_post_desc
WHERE jopo_entity_id = $1
`

func (q *Queries) GetJobPostDesc(ctx context.Context, jopoEntityID int32) (JobhireJobPostDesc, error) {
	row := q.db.QueryRowContext(ctx, getJobPostDesc, jopoEntityID)
	var i JobhireJobPostDesc
	err := row.Scan(
		&i.JopoEntityID,
		&i.JopoDescription,
		&i.JopoResponsibility,
		&i.JopoTarget,
		&i.JopoBenefit,
	)
	return i, err
}

const getLicense = `-- name: GetLicense :one

SELECT usli_id, usli_license_code, usli_modified_date, usli_status, usli_entity_id FROM users.users_license
WHERE usli_id = $1
`

// Users License
func (q *Queries) GetLicense(ctx context.Context, usliID int32) (UsersUsersLicense, error) {
	row := q.db.QueryRowContext(ctx, getLicense, usliID)
	var i UsersUsersLicense
	err := row.Scan(
		&i.UsliID,
		&i.UsliLicenseCode,
		&i.UsliModifiedDate,
		&i.UsliStatus,
		&i.UsliEntityID,
	)
	return i, err
}

const getMasterAddress = `-- name: GetMasterAddress :one
SELECT addr_id, addr_line1, addr_line2, addr_postal_code, addr_spatial_location, addr_modified_date, addr_city_id FROM master.address
WHERE addr_id = $1
`

func (q *Queries) GetMasterAddress(ctx context.Context, addrID int32) (MasterAddress, error) {
	row := q.db.QueryRowContext(ctx, getMasterAddress, addrID)
	var i MasterAddress
	err := row.Scan(
		&i.AddrID,
		&i.AddrLine1,
		&i.AddrLine2,
		&i.AddrPostalCode,
		&i.AddrSpatialLocation,
		&i.AddrModifiedDate,
		&i.AddrCityID,
	)
	return i, err
}

const getMasterCity = `-- name: GetMasterCity :one
SELECT city_id, city_name, city_modified_date, city_prov_id FROM master.city
WHERE city_id = $1
`

func (q *Queries) GetMasterCity(ctx context.Context, cityID int32) (MasterCity, error) {
	row := q.db.QueryRowContext(ctx, getMasterCity, cityID)
	var i MasterCity
	err := row.Scan(
		&i.CityID,
		&i.CityName,
		&i.CityModifiedDate,
		&i.CityProvID,
	)
	return i, err
}

const getMasterJobRole = `-- name: GetMasterJobRole :one
SELECT joro_id, joro_name, joro_modified_date FROM master.job_role
WHERE joro_id = $1
`

func (q *Queries) GetMasterJobRole(ctx context.Context, joroID int32) (MasterJobRole, error) {
	row := q.db.QueryRowContext(ctx, getMasterJobRole, joroID)
	var i MasterJobRole
	err := row.Scan(&i.JoroID, &i.JoroName, &i.JoroModifiedDate)
	return i, err
}

const getMasterWorkingType = `-- name: GetMasterWorkingType :one
SELECT woty_code, woty_name FROM master.working_type
WHERE woty_code = $1
`

func (q *Queries) GetMasterWorkingType(ctx context.Context, wotyCode string) (MasterWorkingType, error) {
	row := q.db.QueryRowContext(ctx, getMasterWorkingType, wotyCode)
	var i MasterWorkingType
	err := row.Scan(&i.WotyCode, &i.WotyName)
	return i, err
}

const getMedia = `-- name: GetMedia :one

SELECT usme_id, usme_entity_id, usme_file_link, usme_filename, usme_filesize, usme_filetype, usme_note, usme_modified_date FROM users.users_media
WHERE usme_id = $1
`

// Users Media
func (q *Queries) GetMedia(ctx context.Context, usmeID int32) (UsersUsersMedium, error) {
	row := q.db.QueryRowContext(ctx, getMedia, usmeID)
	var i UsersUsersMedium
	err := row.Scan(
		&i.UsmeID,
		&i.UsmeEntityID,
		&i.UsmeFileLink,
		&i.UsmeFilename,
		&i.UsmeFilesize,
		&i.UsmeFiletype,
		&i.UsmeNote,
		&i.UsmeModifiedDate,
	)
	return i, err
}

const getPayHistory = `-- name: GetPayHistory :one

SELECT ephi_entity_id, ephi_rate_change_date, ephi_rate_salary, ephi_pay_frequence, ephi_modified_date FROM hr.employee_pay_history
WHERE ephi_entity_id = $1
`

// hr.employee_pay_history
func (q *Queries) GetPayHistory(ctx context.Context, ephiEntityID int32) (HrEmployeePayHistory, error) {
	row := q.db.QueryRowContext(ctx, getPayHistory, ephiEntityID)
	var i HrEmployeePayHistory
	err := row.Scan(
		&i.EphiEntityID,
		&i.EphiRateChangeDate,
		&i.EphiRateSalary,
		&i.EphiPayFrequence,
		&i.EphiModifiedDate,
	)
	return i, err
}

const getPaymentBank = `-- name: GetPaymentBank :one


SELECT bank_entity_id, bank_code, bank_name, bank_modified_date FROM payment.bank WHERE bank_entity_id = $1
`

// payment.bank
func (q *Queries) GetPaymentBank(ctx context.Context, bankEntityID int32) (PaymentBank, error) {
	row := q.db.QueryRowContext(ctx, getPaymentBank, bankEntityID)
	var i PaymentBank
	err := row.Scan(
		&i.BankEntityID,
		&i.BankCode,
		&i.BankName,
		&i.BankModifiedDate,
	)
	return i, err
}

const getPaymentFintech = `-- name: GetPaymentFintech :one


SELECT fint_entity_id, fint_code, fint_name, fint_modified_date FROM payment.fintech WHERE fint_entity_id = $1
`

// payment.fintech
func (q *Queries) GetPaymentFintech(ctx context.Context, fintEntityID int32) (PaymentFintech, error) {
	row := q.db.QueryRowContext(ctx, getPaymentFintech, fintEntityID)
	var i PaymentFintech
	err := row.Scan(
		&i.FintEntityID,
		&i.FintCode,
		&i.FintName,
		&i.FintModifiedDate,
	)
	return i, err
}

const getPaymentTransaction_payment = `-- name: GetPaymentTransaction_payment :one


SELECT trpa_id, trpa_code_number, trpa_order_number, trpa_debit, trpa_credit, trpa_type, trpa_note, trpa_modified_date, trpa_source_id, trpa_target_id, trpa_user_entity_id FROM payment.transaction_payment WHERE trpa_id = $1
`

// payment.transaction_payment
func (q *Queries) GetPaymentTransaction_payment(ctx context.Context, trpaID int32) (PaymentTransactionPayment, error) {
	row := q.db.QueryRowContext(ctx, getPaymentTransaction_payment, trpaID)
	var i PaymentTransactionPayment
	err := row.Scan(
		&i.TrpaID,
		&i.TrpaCodeNumber,
		&i.TrpaOrderNumber,
		&i.TrpaDebit,
		&i.TrpaCredit,
		&i.TrpaType,
		&i.TrpaNote,
		&i.TrpaModifiedDate,
		&i.TrpaSourceID,
		&i.TrpaTargetID,
		&i.TrpaUserEntityID,
	)
	return i, err
}

const getPaymentUsers_account = `-- name: GetPaymentUsers_account :one


SELECT usac_bank_entity_id, usac_user_entity_id, usac_account_number, usac_saldo, usac_type, usac_start_date, usac_end_date, usac_modified_date, usac_status FROM payment.users_account WHERE usac_bank_entity_id = $1
`

// payment.users_account
func (q *Queries) GetPaymentUsers_account(ctx context.Context, usacBankEntityID int32) (PaymentUsersAccount, error) {
	row := q.db.QueryRowContext(ctx, getPaymentUsers_account, usacBankEntityID)
	var i PaymentUsersAccount
	err := row.Scan(
		&i.UsacBankEntityID,
		&i.UsacUserEntityID,
		&i.UsacAccountNumber,
		&i.UsacSaldo,
		&i.UsacType,
		&i.UsacStartDate,
		&i.UsacEndDate,
		&i.UsacModifiedDate,
		&i.UsacStatus,
	)
	return i, err
}

const getPhones = `-- name: GetPhones :one

SELECT uspo_entity_id, uspo_number, uspo_modified_date, uspo_ponty_code FROM users.users_phones
WHERE uspo_entity_id = $1
`

// Users Phones
func (q *Queries) GetPhones(ctx context.Context, uspoEntityID int32) (UsersUsersPhone, error) {
	row := q.db.QueryRowContext(ctx, getPhones, uspoEntityID)
	var i UsersUsersPhone
	err := row.Scan(
		&i.UspoEntityID,
		&i.UspoNumber,
		&i.UspoModifiedDate,
		&i.UspoPontyCode,
	)
	return i, err
}

const getProgramApply = `-- name: GetProgramApply :one
SELECT prap_user_entity_id, prap_prog_entity_id, prap_test_score, prap_gpa, prap_iq_test, prap_review, prap_modified_date, prap_status FROM bootcamp.program_apply
WHERE prap_user_entity_id = $1
`

func (q *Queries) GetProgramApply(ctx context.Context, prapUserEntityID int32) (BootcampProgramApply, error) {
	row := q.db.QueryRowContext(ctx, getProgramApply, prapUserEntityID)
	var i BootcampProgramApply
	err := row.Scan(
		&i.PrapUserEntityID,
		&i.PrapProgEntityID,
		&i.PrapTestScore,
		&i.PrapGpa,
		&i.PrapIqTest,
		&i.PrapReview,
		&i.PrapModifiedDate,
		&i.PrapStatus,
	)
	return i, err
}

const getProgramApplyProgress = `-- name: GetProgramApplyProgress :one
SELECT parog_id, parog_user_entity_id, parog_prog_entity_id, parog_action_date, parog_modified_date, parog_comment, parog_progress_name, parog_emp_entity_id, parog_status FROM bootcamp.program_apply_progress
WHERE parog_id = $1
`

func (q *Queries) GetProgramApplyProgress(ctx context.Context, parogID int32) (BootcampProgramApplyProgress, error) {
	row := q.db.QueryRowContext(ctx, getProgramApplyProgress, parogID)
	var i BootcampProgramApplyProgress
	err := row.Scan(
		&i.ParogID,
		&i.ParogUserEntityID,
		&i.ParogProgEntityID,
		&i.ParogActionDate,
		&i.ParogModifiedDate,
		&i.ParogComment,
		&i.ParogProgressName,
		&i.ParogEmpEntityID,
		&i.ParogStatus,
	)
	return i, err
}

const getRoles = `-- name: GetRoles :one

SELECT role_id, role_name, role_type, role_modified_date FROM users.roles
WHERE role_id = $1
`

// roles
func (q *Queries) GetRoles(ctx context.Context, roleID int32) (UsersRole, error) {
	row := q.db.QueryRowContext(ctx, getRoles, roleID)
	var i UsersRole
	err := row.Scan(
		&i.RoleID,
		&i.RoleName,
		&i.RoleType,
		&i.RoleModifiedDate,
	)
	return i, err
}

const getSkill = `-- name: GetSkill :one

SELECT uski_id, uski_entity_id, uski_modified_date, uski_skty_name FROM users.users_skill
WHERE uski_id = $1
`

// Users Skill
func (q *Queries) GetSkill(ctx context.Context, uskiID int32) (UsersUsersSkill, error) {
	row := q.db.QueryRowContext(ctx, getSkill, uskiID)
	var i UsersUsersSkill
	err := row.Scan(
		&i.UskiID,
		&i.UskiEntityID,
		&i.UskiModifiedDate,
		&i.UskiSktyName,
	)
	return i, err
}

const getTalentApply = `-- name: GetTalentApply :one
SELECT taap_user_entity_id, taap_entity_id, taap_intro, taap_scoring, taap_modified_date, taap_status FROM jobHire.talent_apply
WHERE taap_user_entity_id = $1
`

func (q *Queries) GetTalentApply(ctx context.Context, taapUserEntityID int32) (JobhireTalentApply, error) {
	row := q.db.QueryRowContext(ctx, getTalentApply, taapUserEntityID)
	var i JobhireTalentApply
	err := row.Scan(
		&i.TaapUserEntityID,
		&i.TaapEntityID,
		&i.TaapIntro,
		&i.TaapScoring,
		&i.TaapModifiedDate,
		&i.TaapStatus,
	)
	return i, err
}

const getTalentApplyProgress = `-- name: GetTalentApplyProgress :one
SELECT tapr_id, taap_user_entity_id, taap_entity_id, tapr_modified_date, tapr_status, tapr_comment, tapr_progress_name FROM jobHire.talent_apply_progress
WHERE tapr_id = $1
`

func (q *Queries) GetTalentApplyProgress(ctx context.Context, taprID int32) (JobhireTalentApplyProgress, error) {
	row := q.db.QueryRowContext(ctx, getTalentApplyProgress, taprID)
	var i JobhireTalentApplyProgress
	err := row.Scan(
		&i.TaprID,
		&i.TaapUserEntityID,
		&i.TaapEntityID,
		&i.TaprModifiedDate,
		&i.TaprStatus,
		&i.TaprComment,
		&i.TaprProgressName,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :one

SELECT user_entity_id, user_name, user_password, user_first_name, user_last_name, user_birth_date, user_email_promotion, user_demographic, user_modified_date, user_photo, user_current_role FROM users.users
WHERE user_entity_id = $1
`

// users
func (q *Queries) GetUsers(ctx context.Context, userEntityID int32) (UsersUser, error) {
	row := q.db.QueryRowContext(ctx, getUsers, userEntityID)
	var i UsersUser
	err := row.Scan(
		&i.UserEntityID,
		&i.UserName,
		&i.UserPassword,
		&i.UserFirstName,
		&i.UserLastName,
		&i.UserBirthDate,
		&i.UserEmailPromotion,
		&i.UserDemographic,
		&i.UserModifiedDate,
		&i.UserPhoto,
		&i.UserCurrentRole,
	)
	return i, err
}

const getUsersPhoneNumberType = `-- name: GetUsersPhoneNumberType :one

SELECT ponty_code, ponty_modified_date FROM users.phone_number_type
WHERE ponty_code = $1
`

// Users Phone Number Type
func (q *Queries) GetUsersPhoneNumberType(ctx context.Context, pontyCode string) (UsersPhoneNumberType, error) {
	row := q.db.QueryRowContext(ctx, getUsersPhoneNumberType, pontyCode)
	var i UsersPhoneNumberType
	err := row.Scan(&i.PontyCode, &i.PontyModifiedDate)
	return i, err
}

const getUsersRoles = `-- name: GetUsersRoles :one

SELECT usro_entity_id, usro_role_id, usro_modified_date FROM users.users_roles
WHERE usro_entity_id = $1
`

// users_roles
func (q *Queries) GetUsersRoles(ctx context.Context, usroEntityID int32) (UsersUsersRole, error) {
	row := q.db.QueryRowContext(ctx, getUsersRoles, usroEntityID)
	var i UsersUsersRole
	err := row.Scan(&i.UsroEntityID, &i.UsroRoleID, &i.UsroModifiedDate)
	return i, err
}

const getcSpecial_offer = `-- name: GetcSpecial_offer :one
SELECT spof_id, spof_description, spof_discount, spof_type, spof_start_date, spof_end_date, spof_min_qty, spof_max_qty, spof_modified_date, spof_cate_id FROM sales.special_offer
WHERE spof_id = $1
`

func (q *Queries) GetcSpecial_offer(ctx context.Context, spofID int32) (SalesSpecialOffer, error) {
	row := q.db.QueryRowContext(ctx, getcSpecial_offer, spofID)
	var i SalesSpecialOffer
	err := row.Scan(
		&i.SpofID,
		&i.SpofDescription,
		&i.SpofDiscount,
		&i.SpofType,
		&i.SpofStartDate,
		&i.SpofEndDate,
		&i.SpofMinQty,
		&i.SpofMaxQty,
		&i.SpofModifiedDate,
		&i.SpofCateID,
	)
	return i, err
}

const getcSpecial_offer_programs = `-- name: GetcSpecial_offer_programs :one
SELECT soco_id, soco_spof_id, soco_prog_entity_id, soco_status, soco_modified_date FROM sales.special_offer_programs
WHERE soco_id = $1
`

func (q *Queries) GetcSpecial_offer_programs(ctx context.Context, socoID int32) (SalesSpecialOfferProgram, error) {
	row := q.db.QueryRowContext(ctx, getcSpecial_offer_programs, socoID)
	var i SalesSpecialOfferProgram
	err := row.Scan(
		&i.SocoID,
		&i.SocoSpofID,
		&i.SocoProgEntityID,
		&i.SocoStatus,
		&i.SocoModifiedDate,
	)
	return i, err
}

const getcart_items = `-- name: Getcart_items :one
SELECT cait_id, cait_quantity, cait_unit_price, cait_modified_date, cait_user_entity_id, cait_prog_entity_id FROM sales.cart_items
WHERE cait_id = $1
`

func (q *Queries) Getcart_items(ctx context.Context, caitID int32) (SalesCartItem, error) {
	row := q.db.QueryRowContext(ctx, getcart_items, caitID)
	var i SalesCartItem
	err := row.Scan(
		&i.CaitID,
		&i.CaitQuantity,
		&i.CaitUnitPrice,
		&i.CaitModifiedDate,
		&i.CaitUserEntityID,
		&i.CaitProgEntityID,
	)
	return i, err
}

const getprogram_entity = `-- name: Getprogram_entity :one
SELECT prog_entity_id, prog_title, prog_headline, prog_type, prog_learning_type, prog_rating, prog_total_trainee, prog_modified_date, prog_image, prog_best_seller, prog_price, prog_language, prog_duration, prog_duration_type, prog_tag_skill, prog_city_id, prog_cate_id, prog_created_by, prog_status FROM curriculum.program_entity
WHERE prog_entity_id = $1
`

func (q *Queries) Getprogram_entity(ctx context.Context, progEntityID int32) (CurriculumProgramEntity, error) {
	row := q.db.QueryRowContext(ctx, getprogram_entity, progEntityID)
	var i CurriculumProgramEntity
	err := row.Scan(
		&i.ProgEntityID,
		&i.ProgTitle,
		&i.ProgHeadline,
		&i.ProgType,
		&i.ProgLearningType,
		&i.ProgRating,
		&i.ProgTotalTrainee,
		&i.ProgModifiedDate,
		&i.ProgImage,
		&i.ProgBestSeller,
		&i.ProgPrice,
		&i.ProgLanguage,
		&i.ProgDuration,
		&i.ProgDurationType,
		&i.ProgTagSkill,
		&i.ProgCityID,
		&i.ProgCateID,
		&i.ProgCreatedBy,
		&i.ProgStatus,
	)
	return i, err
}

const getprogram_entity_description = `-- name: Getprogram_entity_description :one

SELECT pred_prog_entity_id, pred_item_learning, pred_item_include, pred_requirement, pred_description, pred_target_level FROM curriculum.program_entity_description
WHERE pred_prog_entity_id = $1
`

// curriculum.program_entity_description
func (q *Queries) Getprogram_entity_description(ctx context.Context, predProgEntityID int32) (CurriculumProgramEntityDescription, error) {
	row := q.db.QueryRowContext(ctx, getprogram_entity_description, predProgEntityID)
	var i CurriculumProgramEntityDescription
	err := row.Scan(
		&i.PredProgEntityID,
		&i.PredItemLearning,
		&i.PredItemInclude,
		&i.PredRequirement,
		&i.PredDescription,
		&i.PredTargetLevel,
	)
	return i, err
}

const getprogram_reviews = `-- name: Getprogram_reviews :one

SELECT prow_user_entity_id, prow_prog_entity_id, prow_review, prow_rating, prow_modified_date FROM curriculum.program_reviews
WHERE prow_user_entity_id = $1
`

// curriculum.program_reviews
func (q *Queries) Getprogram_reviews(ctx context.Context, prowUserEntityID int32) (CurriculumProgramReview, error) {
	row := q.db.QueryRowContext(ctx, getprogram_reviews, prowUserEntityID)
	var i CurriculumProgramReview
	err := row.Scan(
		&i.ProwUserEntityID,
		&i.ProwProgEntityID,
		&i.ProwReview,
		&i.ProwRating,
		&i.ProwModifiedDate,
	)
	return i, err
}

const getsales_order_detail = `-- name: Getsales_order_detail :one
SELECT sode_id, sode_qty, sode_unit_price, sode_unit_discount, sode_line_total, sode_modified_date, sode_sohe_id, sode_prog_entity_id FROM sales.sales_order_detail
WHERE sode_id = $1
`

func (q *Queries) Getsales_order_detail(ctx context.Context, sodeID int32) (SalesSalesOrderDetail, error) {
	row := q.db.QueryRowContext(ctx, getsales_order_detail, sodeID)
	var i SalesSalesOrderDetail
	err := row.Scan(
		&i.SodeID,
		&i.SodeQty,
		&i.SodeUnitPrice,
		&i.SodeUnitDiscount,
		&i.SodeLineTotal,
		&i.SodeModifiedDate,
		&i.SodeSoheID,
		&i.SodeProgEntityID,
	)
	return i, err
}

const getsales_order_header = `-- name: Getsales_order_header :one
SELECT sohe_id, sohe_order_date, sohe_due_date, sohe_ship_date, sohe_order_number, sohe_account_number, sohe_trpa_code_number, sohe_subtotal, sohe_tax, sohe_total_due, sohe_license_code, sohe_modified_date, sohe_user_entity_id, sohe_status FROM sales.sales_order_header
WHERE sohe_id = $1
`

func (q *Queries) Getsales_order_header(ctx context.Context, soheID int32) (SalesSalesOrderHeader, error) {
	row := q.db.QueryRowContext(ctx, getsales_order_header, soheID)
	var i SalesSalesOrderHeader
	err := row.Scan(
		&i.SoheID,
		&i.SoheOrderDate,
		&i.SoheDueDate,
		&i.SoheShipDate,
		&i.SoheOrderNumber,
		&i.SoheAccountNumber,
		&i.SoheTrpaCodeNumber,
		&i.SoheSubtotal,
		&i.SoheTax,
		&i.SoheTotalDue,
		&i.SoheLicenseCode,
		&i.SoheModifiedDate,
		&i.SoheUserEntityID,
		&i.SoheStatus,
	)
	return i, err
}

const getsection_detail = `-- name: Getsection_detail :one

SELECT secd_id, secd_title, secd_preview, secd_score, secd_note, secd_minute, secd_modified_date, secd_sect_id FROM curriculum.section_detail
WHERE secd_id = $1
`

// curriculum.section_detail
func (q *Queries) Getsection_detail(ctx context.Context, secdID int32) (CurriculumSectionDetail, error) {
	row := q.db.QueryRowContext(ctx, getsection_detail, secdID)
	var i CurriculumSectionDetail
	err := row.Scan(
		&i.SecdID,
		&i.SecdTitle,
		&i.SecdPreview,
		&i.SecdScore,
		&i.SecdNote,
		&i.SecdMinute,
		&i.SecdModifiedDate,
		&i.SecdSectID,
	)
	return i, err
}

const getsection_detail_material = `-- name: Getsection_detail_material :one

SELECT sedm_id, sedm_filename, sedm_filesize, sedm_filetype, sedm_filelink, sedm_modified_date, sedm_secd_id FROM curriculum.section_detail_material
WHERE sedm_id = $1
`

// curriculum.section_detail_material
func (q *Queries) Getsection_detail_material(ctx context.Context, sedmID int32) (CurriculumSectionDetailMaterial, error) {
	row := q.db.QueryRowContext(ctx, getsection_detail_material, sedmID)
	var i CurriculumSectionDetailMaterial
	err := row.Scan(
		&i.SedmID,
		&i.SedmFilename,
		&i.SedmFilesize,
		&i.SedmFiletype,
		&i.SedmFilelink,
		&i.SedmModifiedDate,
		&i.SedmSecdID,
	)
	return i, err
}

const getsections = `-- name: Getsections :one

SELECT sect_id, sect_prog_entity_id, sect_title, sect_description, sect_total_section, sect_total_lecture, sect_total_minute, sect_modified_date FROM curriculum.sections
WHERE sect_id = $1
`

// curriculum.sections
func (q *Queries) Getsections(ctx context.Context, sectID int32) (CurriculumSection, error) {
	row := q.db.QueryRowContext(ctx, getsections, sectID)
	var i CurriculumSection
	err := row.Scan(
		&i.SectID,
		&i.SectProgEntityID,
		&i.SectTitle,
		&i.SectDescription,
		&i.SectTotalSection,
		&i.SectTotalLecture,
		&i.SectTotalMinute,
		&i.SectModifiedDate,
	)
	return i, err
}

const listAddress = `-- name: ListAddress :many
SELECT etad_addr_id, etad_modified_date, etad_entity_id, etad_adty_id FROM users.users_address
ORDER BY etad_modified_date
`

func (q *Queries) ListAddress(ctx context.Context) ([]UsersUsersAddress, error) {
	rows, err := q.db.QueryContext(ctx, listAddress)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersUsersAddress
	for rows.Next() {
		var i UsersUsersAddress
		if err := rows.Scan(
			&i.EtadAddrID,
			&i.EtadModifiedDate,
			&i.EtadEntityID,
			&i.EtadAdtyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBatchTraineeEvaluations = `-- name: ListBatchTraineeEvaluations :many
SELECT btev_id, btev_type, btev_header, btev_section, btev_skill, btev_week, btev_skor, btev_note, btev_modified_date, btev_batch_id, btev_trainee_entity_id FROM bootcamp.batch_trainee_evaluation
ORDER BY btev_id
`

func (q *Queries) ListBatchTraineeEvaluations(ctx context.Context) ([]BootcampBatchTraineeEvaluation, error) {
	rows, err := q.db.QueryContext(ctx, listBatchTraineeEvaluations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BootcampBatchTraineeEvaluation
	for rows.Next() {
		var i BootcampBatchTraineeEvaluation
		if err := rows.Scan(
			&i.BtevID,
			&i.BtevType,
			&i.BtevHeader,
			&i.BtevSection,
			&i.BtevSkill,
			&i.BtevWeek,
			&i.BtevSkor,
			&i.BtevNote,
			&i.BtevModifiedDate,
			&i.BtevBatchID,
			&i.BtevTraineeEntityID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBatchTrinee = `-- name: ListBatchTrinee :many
SELECT batr_id, batr_status, batr_certificated, batre_certificate_link, batr_access_token, batr_access_grant, batr_review, batr_total_score, batr_modified_date, batr_trainee_entity_id, batr_batch_id FROM bootcamp.batch_trainee
ORDER BY batr_id
`

func (q *Queries) ListBatchTrinee(ctx context.Context) ([]BootcampBatchTrainee, error) {
	rows, err := q.db.QueryContext(ctx, listBatchTrinee)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BootcampBatchTrainee
	for rows.Next() {
		var i BootcampBatchTrainee
		if err := rows.Scan(
			&i.BatrID,
			&i.BatrStatus,
			&i.BatrCertificated,
			&i.BatreCertificateLink,
			&i.BatrAccessToken,
			&i.BatrAccessGrant,
			&i.BatrReview,
			&i.BatrTotalScore,
			&i.BatrModifiedDate,
			&i.BatrTraineeEntityID,
			&i.BatrBatchID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBatchs = `-- name: ListBatchs :many
SELECT batch_id, batch_entity_id, batch_name, batch_description, batch_start_date, batch_end_date, batch_reason, batch_type, batch_modified_date, batch_status, batch_pic_id FROM bootcamp.batch
ORDER BY batch_name
`

func (q *Queries) ListBatchs(ctx context.Context) ([]BootcampBatch, error) {
	rows, err := q.db.QueryContext(ctx, listBatchs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BootcampBatch
	for rows.Next() {
		var i BootcampBatch
		if err := rows.Scan(
			&i.BatchID,
			&i.BatchEntityID,
			&i.BatchName,
			&i.BatchDescription,
			&i.BatchStartDate,
			&i.BatchEndDate,
			&i.BatchReason,
			&i.BatchType,
			&i.BatchModifiedDate,
			&i.BatchStatus,
			&i.BatchPicID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBusinessEntity = `-- name: ListBusinessEntity :many
SELECT entity_id FROM users.business_entity
ORDER BY entity_id
`

func (q *Queries) ListBusinessEntity(ctx context.Context) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, listBusinessEntity)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var entity_id int32
		if err := rows.Scan(&entity_id); err != nil {
			return nil, err
		}
		items = append(items, entity_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCart_item = `-- name: ListCart_item :many
SELECT cait_id, cait_quantity, cait_unit_price, cait_modified_date, cait_user_entity_id, cait_prog_entity_id FROM sales.cart_items
ORDER BY cait_quantity
`

func (q *Queries) ListCart_item(ctx context.Context) ([]SalesCartItem, error) {
	rows, err := q.db.QueryContext(ctx, listCart_item)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SalesCartItem
	for rows.Next() {
		var i SalesCartItem
		if err := rows.Scan(
			&i.CaitID,
			&i.CaitQuantity,
			&i.CaitUnitPrice,
			&i.CaitModifiedDate,
			&i.CaitUserEntityID,
			&i.CaitProgEntityID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCategories = `-- name: ListCategories :many
SELECT joca_id, joca_name, joca_modified_date FROM jobHire.job_category
ORDER BY joca_name
`

func (q *Queries) ListCategories(ctx context.Context) ([]JobhireJobCategory, error) {
	rows, err := q.db.QueryContext(ctx, listCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []JobhireJobCategory
	for rows.Next() {
		var i JobhireJobCategory
		if err := rows.Scan(&i.JocaID, &i.JocaName, &i.JocaModifiedDate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listClient = `-- name: ListClient :many
SELECT clit_id, clit_name, clit_about, clit_modified_date, clit_addr_id, clit_emra_id FROM jobHire.client
ORDER BY clit_name
`

func (q *Queries) ListClient(ctx context.Context) ([]JobhireClient, error) {
	rows, err := q.db.QueryContext(ctx, listClient)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []JobhireClient
	for rows.Next() {
		var i JobhireClient
		if err := rows.Scan(
			&i.ClitID,
			&i.ClitName,
			&i.ClitAbout,
			&i.ClitModifiedDate,
			&i.ClitAddrID,
			&i.ClitEmraID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listClientContract = `-- name: ListClientContract :many
SELECT ecco_id, ecco_entity_id, ecco_contract_no, ecco_contract_date, ecco_start_date, ecco_end_date, ecco_notes, ecco_modified_date, ecco_media_link, ecco_joty_id, ecco_account_manager, ecco_clit_id, ecco_status FROM hr.employee_client_contract
ORDER BY ecco_id
`

func (q *Queries) ListClientContract(ctx context.Context) ([]HrEmployeeClientContract, error) {
	rows, err := q.db.QueryContext(ctx, listClientContract)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HrEmployeeClientContract
	for rows.Next() {
		var i HrEmployeeClientContract
		if err := rows.Scan(
			&i.EccoID,
			&i.EccoEntityID,
			&i.EccoContractNo,
			&i.EccoContractDate,
			&i.EccoStartDate,
			&i.EccoEndDate,
			&i.EccoNotes,
			&i.EccoModifiedDate,
			&i.EccoMediaLink,
			&i.EccoJotyID,
			&i.EccoAccountManager,
			&i.EccoClitID,
			&i.EccoStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDepartment = `-- name: ListDepartment :many
SELECT dept_id, dept_name, dept_modified_date FROM hr.department
ORDER BY dept_id
`

func (q *Queries) ListDepartment(ctx context.Context) ([]HrDepartment, error) {
	rows, err := q.db.QueryContext(ctx, listDepartment)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HrDepartment
	for rows.Next() {
		var i HrDepartment
		if err := rows.Scan(&i.DeptID, &i.DeptName, &i.DeptModifiedDate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEducation = `-- name: ListEducation :many
SELECT usdu_id, usdu_entity_id, usdu_school, usdu_degree, usdu_field_study, usdu_graduate_year, usdu_start_date, usdu_end_date, usdu_grade, usdu_activities, usdu_description, usdu_modified_date FROM users.users_education
ORDER BY usdu_entity_id
`

func (q *Queries) ListEducation(ctx context.Context) ([]UsersUsersEducation, error) {
	rows, err := q.db.QueryContext(ctx, listEducation)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersUsersEducation
	for rows.Next() {
		var i UsersUsersEducation
		if err := rows.Scan(
			&i.UsduID,
			&i.UsduEntityID,
			&i.UsduSchool,
			&i.UsduDegree,
			&i.UsduFieldStudy,
			&i.UsduGraduateYear,
			&i.UsduStartDate,
			&i.UsduEndDate,
			&i.UsduGrade,
			&i.UsduActivities,
			&i.UsduDescription,
			&i.UsduModifiedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEmail = `-- name: ListEmail :many
SELECT pmail_entity_id, pmail_id, pmail_address, pmail_modified_date FROM users.users_email
ORDER BY pmail_id
`

func (q *Queries) ListEmail(ctx context.Context) ([]UsersUsersEmail, error) {
	rows, err := q.db.QueryContext(ctx, listEmail)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersUsersEmail
	for rows.Next() {
		var i UsersUsersEmail
		if err := rows.Scan(
			&i.PmailEntityID,
			&i.PmailID,
			&i.PmailAddress,
			&i.PmailModifiedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEmployeeDepartmentHistory = `-- name: ListEmployeeDepartmentHistory :many
SELECT edhi_id, edhi_entity_id, edhi_start_date, edhi_end_date, edhi_modified_date, edhi_dept_id FROM hr.employee_department_history
ORDER BY edhi_id
`

func (q *Queries) ListEmployeeDepartmentHistory(ctx context.Context) ([]HrEmployeeDepartmentHistory, error) {
	rows, err := q.db.QueryContext(ctx, listEmployeeDepartmentHistory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HrEmployeeDepartmentHistory
	for rows.Next() {
		var i HrEmployeeDepartmentHistory
		if err := rows.Scan(
			&i.EdhiID,
			&i.EdhiEntityID,
			&i.EdhiStartDate,
			&i.EdhiEndDate,
			&i.EdhiModifiedDate,
			&i.EdhiDeptID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEmployees = `-- name: ListEmployees :many
SELECT emp_entity_id, emp_emp_number, emp_national_id, emp_birth_date, emp_marital_status, emp_gender, emp_hire_date, emp_salaried_flag, emp_vacation_hours, emp_sickleave_hours, emp_current_flag, emp_modified_date, emp_type, emp_joro_id, emp_emp_entity_id FROM hr.employee
ORDER BY emp_emp_number
`

func (q *Queries) ListEmployees(ctx context.Context) ([]HrEmployee, error) {
	rows, err := q.db.QueryContext(ctx, listEmployees)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HrEmployee
	for rows.Next() {
		var i HrEmployee
		if err := rows.Scan(
			&i.EmpEntityID,
			&i.EmpEmpNumber,
			&i.EmpNationalID,
			&i.EmpBirthDate,
			&i.EmpMaritalStatus,
			&i.EmpGender,
			&i.EmpHireDate,
			&i.EmpSalariedFlag,
			&i.EmpVacationHours,
			&i.EmpSickleaveHours,
			&i.EmpCurrentFlag,
			&i.EmpModifiedDate,
			&i.EmpType,
			&i.EmpJoroID,
			&i.EmpEmpEntityID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEmployeesRange = `-- name: ListEmployeesRange :many
SELECT emra_id, emra_range_min, emra_range_max, emra_modified_date FROM jobHire.employee_range
ORDER BY emra_range_max
`

func (q *Queries) ListEmployeesRange(ctx context.Context) ([]JobhireEmployeeRange, error) {
	rows, err := q.db.QueryContext(ctx, listEmployeesRange)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []JobhireEmployeeRange
	for rows.Next() {
		var i JobhireEmployeeRange
		if err := rows.Scan(
			&i.EmraID,
			&i.EmraRangeMin,
			&i.EmraRangeMax,
			&i.EmraModifiedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listExperience = `-- name: ListExperience :many
SELECT usex_id, usex_entity_id, usex_title, usex_profile_headline, usex_employment_type, usex_company_name, usex_is_current, usex_start_date, usex_end_date, usex_industry, usex_description, usex_experience_type, usex_city_id FROM users.users_experiences
ORDER BY usex_title
`

func (q *Queries) ListExperience(ctx context.Context) ([]UsersUsersExperience, error) {
	rows, err := q.db.QueryContext(ctx, listExperience)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersUsersExperience
	for rows.Next() {
		var i UsersUsersExperience
		if err := rows.Scan(
			&i.UsexID,
			&i.UsexEntityID,
			&i.UsexTitle,
			&i.UsexProfileHeadline,
			&i.UsexEmploymentType,
			&i.UsexCompanyName,
			&i.UsexIsCurrent,
			&i.UsexStartDate,
			&i.UsexEndDate,
			&i.UsexIndustry,
			&i.UsexDescription,
			&i.UsexExperienceType,
			&i.UsexCityID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listExperienceSkill = `-- name: ListExperienceSkill :many
SELECT uesk_usex_id, uesk_uski_id FROM users.users_experiences_skill
ORDER BY uesk_uski_id
`

func (q *Queries) ListExperienceSkill(ctx context.Context) ([]UsersUsersExperiencesSkill, error) {
	rows, err := q.db.QueryContext(ctx, listExperienceSkill)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersUsersExperiencesSkill
	for rows.Next() {
		var i UsersUsersExperiencesSkill
		if err := rows.Scan(&i.UeskUsexID, &i.UeskUskiID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listInstructorPrograms = `-- name: ListInstructorPrograms :many
SELECT batch_id, inpro_entity_id, inpro_emp_entity_id, inpro_modified_date FROM bootcamp.instructor_programs
ORDER BY batch_id
`

func (q *Queries) ListInstructorPrograms(ctx context.Context) ([]BootcampInstructorProgram, error) {
	rows, err := q.db.QueryContext(ctx, listInstructorPrograms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BootcampInstructorProgram
	for rows.Next() {
		var i BootcampInstructorProgram
		if err := rows.Scan(
			&i.BatchID,
			&i.InproEntityID,
			&i.InproEmpEntityID,
			&i.InproModifiedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listJobPost = `-- name: ListJobPost :many
SELECT jopo_entity_id, jopo_number, jopo_title, jopo_start_date, jopo_end_date, jopo_min_salary, jopo_max_salary, jopo_min_experience, jopo_max_experience, jopo_primary_skill, jopo_secondary_skill, jopo_publish_date, jopo_modified_date, jopo_emp_entity_id, jopo_clit_id, jopo_joro_id, jopo_joty_id, jopo_joca_id, jopo_addr_id, jopo_work_code, jopo_edu_code, jopo_indu_code, jopo_status FROM jobHire.job_post
ORDER BY jopo_title
`

func (q *Queries) ListJobPost(ctx context.Context) ([]JobhireJobPost, error) {
	rows, err := q.db.QueryContext(ctx, listJobPost)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []JobhireJobPost
	for rows.Next() {
		var i JobhireJobPost
		if err := rows.Scan(
			&i.JopoEntityID,
			&i.JopoNumber,
			&i.JopoTitle,
			&i.JopoStartDate,
			&i.JopoEndDate,
			&i.JopoMinSalary,
			&i.JopoMaxSalary,
			&i.JopoMinExperience,
			&i.JopoMaxExperience,
			&i.JopoPrimarySkill,
			&i.JopoSecondarySkill,
			&i.JopoPublishDate,
			&i.JopoModifiedDate,
			&i.JopoEmpEntityID,
			&i.JopoClitID,
			&i.JopoJoroID,
			&i.JopoJotyID,
			&i.JopoJocaID,
			&i.JopoAddrID,
			&i.JopoWorkCode,
			&i.JopoEduCode,
			&i.JopoInduCode,
			&i.JopoStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listJobPostDesc = `-- name: ListJobPostDesc :many
SELECT jopo_entity_id, jopo_description, jopo_responsibility, jopo_target, jopo_benefit FROM jobHire.job_post_desc
ORDER BY jopo_entity_id
`

func (q *Queries) ListJobPostDesc(ctx context.Context) ([]JobhireJobPostDesc, error) {
	rows, err := q.db.QueryContext(ctx, listJobPostDesc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []JobhireJobPostDesc
	for rows.Next() {
		var i JobhireJobPostDesc
		if err := rows.Scan(
			&i.JopoEntityID,
			&i.JopoDescription,
			&i.JopoResponsibility,
			&i.JopoTarget,
			&i.JopoBenefit,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLicense = `-- name: ListLicense :many
SELECT usli_id, usli_license_code, usli_modified_date, usli_status, usli_entity_id FROM users.users_license
ORDER BY usli_id
`

func (q *Queries) ListLicense(ctx context.Context) ([]UsersUsersLicense, error) {
	rows, err := q.db.QueryContext(ctx, listLicense)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersUsersLicense
	for rows.Next() {
		var i UsersUsersLicense
		if err := rows.Scan(
			&i.UsliID,
			&i.UsliLicenseCode,
			&i.UsliModifiedDate,
			&i.UsliStatus,
			&i.UsliEntityID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMasterAddress = `-- name: ListMasterAddress :many
SELECT addr_id, addr_line1, addr_line2, addr_postal_code, addr_spatial_location, addr_modified_date, addr_city_id FROM master.address
ORDER BY addr_id
`

func (q *Queries) ListMasterAddress(ctx context.Context) ([]MasterAddress, error) {
	rows, err := q.db.QueryContext(ctx, listMasterAddress)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MasterAddress
	for rows.Next() {
		var i MasterAddress
		if err := rows.Scan(
			&i.AddrID,
			&i.AddrLine1,
			&i.AddrLine2,
			&i.AddrPostalCode,
			&i.AddrSpatialLocation,
			&i.AddrModifiedDate,
			&i.AddrCityID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMasterCity = `-- name: ListMasterCity :many
SELECT city_id, city_name, city_modified_date, city_prov_id FROM master.city
ORDER BY city_id
`

func (q *Queries) ListMasterCity(ctx context.Context) ([]MasterCity, error) {
	rows, err := q.db.QueryContext(ctx, listMasterCity)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MasterCity
	for rows.Next() {
		var i MasterCity
		if err := rows.Scan(
			&i.CityID,
			&i.CityName,
			&i.CityModifiedDate,
			&i.CityProvID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMasterJobRole = `-- name: ListMasterJobRole :many
SELECT joro_id, joro_name, joro_modified_date FROM master.job_role
ORDER BY joro_id
`

func (q *Queries) ListMasterJobRole(ctx context.Context) ([]MasterJobRole, error) {
	rows, err := q.db.QueryContext(ctx, listMasterJobRole)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MasterJobRole
	for rows.Next() {
		var i MasterJobRole
		if err := rows.Scan(&i.JoroID, &i.JoroName, &i.JoroModifiedDate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMasterWorkingType = `-- name: ListMasterWorkingType :many
SELECT woty_code, woty_name FROM master.working_type
ORDER BY woty_code
`

func (q *Queries) ListMasterWorkingType(ctx context.Context) ([]MasterWorkingType, error) {
	rows, err := q.db.QueryContext(ctx, listMasterWorkingType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MasterWorkingType
	for rows.Next() {
		var i MasterWorkingType
		if err := rows.Scan(&i.WotyCode, &i.WotyName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMedia = `-- name: ListMedia :many
SELECT usme_id, usme_entity_id, usme_file_link, usme_filename, usme_filesize, usme_filetype, usme_note, usme_modified_date FROM users.users_media
ORDER BY usme_id
`

func (q *Queries) ListMedia(ctx context.Context) ([]UsersUsersMedium, error) {
	rows, err := q.db.QueryContext(ctx, listMedia)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersUsersMedium
	for rows.Next() {
		var i UsersUsersMedium
		if err := rows.Scan(
			&i.UsmeID,
			&i.UsmeEntityID,
			&i.UsmeFileLink,
			&i.UsmeFilename,
			&i.UsmeFilesize,
			&i.UsmeFiletype,
			&i.UsmeNote,
			&i.UsmeModifiedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPayHistory = `-- name: ListPayHistory :many
SELECT ephi_entity_id, ephi_rate_change_date, ephi_rate_salary, ephi_pay_frequence, ephi_modified_date FROM hr.employee_pay_history
ORDER BY ephi_entity_id
`

func (q *Queries) ListPayHistory(ctx context.Context) ([]HrEmployeePayHistory, error) {
	rows, err := q.db.QueryContext(ctx, listPayHistory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HrEmployeePayHistory
	for rows.Next() {
		var i HrEmployeePayHistory
		if err := rows.Scan(
			&i.EphiEntityID,
			&i.EphiRateChangeDate,
			&i.EphiRateSalary,
			&i.EphiPayFrequence,
			&i.EphiModifiedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPaymentBank = `-- name: ListPaymentBank :many

SELECT bank_entity_id, bank_code, bank_name, bank_modified_date FROM payment.bank ORDER BY bank_name
`

func (q *Queries) ListPaymentBank(ctx context.Context) ([]PaymentBank, error) {
	rows, err := q.db.QueryContext(ctx, listPaymentBank)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PaymentBank
	for rows.Next() {
		var i PaymentBank
		if err := rows.Scan(
			&i.BankEntityID,
			&i.BankCode,
			&i.BankName,
			&i.BankModifiedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPaymentFintech = `-- name: ListPaymentFintech :many

SELECT fint_entity_id, fint_code, fint_name, fint_modified_date FROM payment.fintech ORDER BY fint_name
`

func (q *Queries) ListPaymentFintech(ctx context.Context) ([]PaymentFintech, error) {
	rows, err := q.db.QueryContext(ctx, listPaymentFintech)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PaymentFintech
	for rows.Next() {
		var i PaymentFintech
		if err := rows.Scan(
			&i.FintEntityID,
			&i.FintCode,
			&i.FintName,
			&i.FintModifiedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPaymentTransaction_payment = `-- name: ListPaymentTransaction_payment :many

SELECT trpa_id, trpa_code_number, trpa_order_number, trpa_debit, trpa_credit, trpa_type, trpa_note, trpa_modified_date, trpa_source_id, trpa_target_id, trpa_user_entity_id FROM payment.transaction_payment ORDER BY trpa_code_number
`

func (q *Queries) ListPaymentTransaction_payment(ctx context.Context) ([]PaymentTransactionPayment, error) {
	rows, err := q.db.QueryContext(ctx, listPaymentTransaction_payment)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PaymentTransactionPayment
	for rows.Next() {
		var i PaymentTransactionPayment
		if err := rows.Scan(
			&i.TrpaID,
			&i.TrpaCodeNumber,
			&i.TrpaOrderNumber,
			&i.TrpaDebit,
			&i.TrpaCredit,
			&i.TrpaType,
			&i.TrpaNote,
			&i.TrpaModifiedDate,
			&i.TrpaSourceID,
			&i.TrpaTargetID,
			&i.TrpaUserEntityID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPaymentUsers_account = `-- name: ListPaymentUsers_account :many

SELECT usac_bank_entity_id, usac_user_entity_id, usac_account_number, usac_saldo, usac_type, usac_start_date, usac_end_date, usac_modified_date, usac_status FROM payment.users_account ORDER BY usac_account_number
`

func (q *Queries) ListPaymentUsers_account(ctx context.Context) ([]PaymentUsersAccount, error) {
	rows, err := q.db.QueryContext(ctx, listPaymentUsers_account)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PaymentUsersAccount
	for rows.Next() {
		var i PaymentUsersAccount
		if err := rows.Scan(
			&i.UsacBankEntityID,
			&i.UsacUserEntityID,
			&i.UsacAccountNumber,
			&i.UsacSaldo,
			&i.UsacType,
			&i.UsacStartDate,
			&i.UsacEndDate,
			&i.UsacModifiedDate,
			&i.UsacStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPhones = `-- name: ListPhones :many
SELECT uspo_entity_id, uspo_number, uspo_modified_date, uspo_ponty_code FROM users.users_phones
ORDER BY uspo_entity_id
`

func (q *Queries) ListPhones(ctx context.Context) ([]UsersUsersPhone, error) {
	rows, err := q.db.QueryContext(ctx, listPhones)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersUsersPhone
	for rows.Next() {
		var i UsersUsersPhone
		if err := rows.Scan(
			&i.UspoEntityID,
			&i.UspoNumber,
			&i.UspoModifiedDate,
			&i.UspoPontyCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProgramApplies = `-- name: ListProgramApplies :many
SELECT prap_user_entity_id, prap_prog_entity_id, prap_test_score, prap_gpa, prap_iq_test, prap_review, prap_modified_date, prap_status FROM bootcamp.program_apply
ORDER BY prap_user_entity_id
`

func (q *Queries) ListProgramApplies(ctx context.Context) ([]BootcampProgramApply, error) {
	rows, err := q.db.QueryContext(ctx, listProgramApplies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BootcampProgramApply
	for rows.Next() {
		var i BootcampProgramApply
		if err := rows.Scan(
			&i.PrapUserEntityID,
			&i.PrapProgEntityID,
			&i.PrapTestScore,
			&i.PrapGpa,
			&i.PrapIqTest,
			&i.PrapReview,
			&i.PrapModifiedDate,
			&i.PrapStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProgramApplyProgresses = `-- name: ListProgramApplyProgresses :many
SELECT parog_id, parog_user_entity_id, parog_prog_entity_id, parog_action_date, parog_modified_date, parog_comment, parog_progress_name, parog_emp_entity_id, parog_status FROM bootcamp.program_apply_progress
ORDER BY parog_id
`

func (q *Queries) ListProgramApplyProgresses(ctx context.Context) ([]BootcampProgramApplyProgress, error) {
	rows, err := q.db.QueryContext(ctx, listProgramApplyProgresses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BootcampProgramApplyProgress
	for rows.Next() {
		var i BootcampProgramApplyProgress
		if err := rows.Scan(
			&i.ParogID,
			&i.ParogUserEntityID,
			&i.ParogProgEntityID,
			&i.ParogActionDate,
			&i.ParogModifiedDate,
			&i.ParogComment,
			&i.ParogProgressName,
			&i.ParogEmpEntityID,
			&i.ParogStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRoles = `-- name: ListRoles :many
SELECT role_id, role_name, role_type, role_modified_date FROM users.roles
ORDER BY role_name
`

func (q *Queries) ListRoles(ctx context.Context) ([]UsersRole, error) {
	rows, err := q.db.QueryContext(ctx, listRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersRole
	for rows.Next() {
		var i UsersRole
		if err := rows.Scan(
			&i.RoleID,
			&i.RoleName,
			&i.RoleType,
			&i.RoleModifiedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSales_order_detail = `-- name: ListSales_order_detail :many
SELECT sode_id, sode_qty, sode_unit_price, sode_unit_discount, sode_line_total, sode_modified_date, sode_sohe_id, sode_prog_entity_id FROM sales.sales_order_detail
ORDER BY sode_qty
`

func (q *Queries) ListSales_order_detail(ctx context.Context) ([]SalesSalesOrderDetail, error) {
	rows, err := q.db.QueryContext(ctx, listSales_order_detail)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SalesSalesOrderDetail
	for rows.Next() {
		var i SalesSalesOrderDetail
		if err := rows.Scan(
			&i.SodeID,
			&i.SodeQty,
			&i.SodeUnitPrice,
			&i.SodeUnitDiscount,
			&i.SodeLineTotal,
			&i.SodeModifiedDate,
			&i.SodeSoheID,
			&i.SodeProgEntityID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSales_order_header = `-- name: ListSales_order_header :many
SELECT sohe_id, sohe_order_date, sohe_due_date, sohe_ship_date, sohe_order_number, sohe_account_number, sohe_trpa_code_number, sohe_subtotal, sohe_tax, sohe_total_due, sohe_license_code, sohe_modified_date, sohe_user_entity_id, sohe_status FROM sales.sales_order_header
ORDER BY  sohe_order_date
`

func (q *Queries) ListSales_order_header(ctx context.Context) ([]SalesSalesOrderHeader, error) {
	rows, err := q.db.QueryContext(ctx, listSales_order_header)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SalesSalesOrderHeader
	for rows.Next() {
		var i SalesSalesOrderHeader
		if err := rows.Scan(
			&i.SoheID,
			&i.SoheOrderDate,
			&i.SoheDueDate,
			&i.SoheShipDate,
			&i.SoheOrderNumber,
			&i.SoheAccountNumber,
			&i.SoheTrpaCodeNumber,
			&i.SoheSubtotal,
			&i.SoheTax,
			&i.SoheTotalDue,
			&i.SoheLicenseCode,
			&i.SoheModifiedDate,
			&i.SoheUserEntityID,
			&i.SoheStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSkill = `-- name: ListSkill :many
SELECT uski_id, uski_entity_id, uski_modified_date, uski_skty_name FROM users.users_skill
ORDER BY uski_id
`

func (q *Queries) ListSkill(ctx context.Context) ([]UsersUsersSkill, error) {
	rows, err := q.db.QueryContext(ctx, listSkill)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersUsersSkill
	for rows.Next() {
		var i UsersUsersSkill
		if err := rows.Scan(
			&i.UskiID,
			&i.UskiEntityID,
			&i.UskiModifiedDate,
			&i.UskiSktyName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSpecial_offer = `-- name: ListSpecial_offer :many
SELECT spof_id, spof_description, spof_discount, spof_type, spof_start_date, spof_end_date, spof_min_qty, spof_max_qty, spof_modified_date, spof_cate_id FROM sales.special_offer
ORDER BY  spof_description
`

func (q *Queries) ListSpecial_offer(ctx context.Context) ([]SalesSpecialOffer, error) {
	rows, err := q.db.QueryContext(ctx, listSpecial_offer)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SalesSpecialOffer
	for rows.Next() {
		var i SalesSpecialOffer
		if err := rows.Scan(
			&i.SpofID,
			&i.SpofDescription,
			&i.SpofDiscount,
			&i.SpofType,
			&i.SpofStartDate,
			&i.SpofEndDate,
			&i.SpofMinQty,
			&i.SpofMaxQty,
			&i.SpofModifiedDate,
			&i.SpofCateID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSpecial_offer_programs = `-- name: ListSpecial_offer_programs :many
SELECT soco_id, soco_spof_id, soco_prog_entity_id, soco_status, soco_modified_date FROM sales.special_offer_programs
ORDER BY soco_spof_id
`

func (q *Queries) ListSpecial_offer_programs(ctx context.Context) ([]SalesSpecialOfferProgram, error) {
	rows, err := q.db.QueryContext(ctx, listSpecial_offer_programs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SalesSpecialOfferProgram
	for rows.Next() {
		var i SalesSpecialOfferProgram
		if err := rows.Scan(
			&i.SocoID,
			&i.SocoSpofID,
			&i.SocoProgEntityID,
			&i.SocoStatus,
			&i.SocoModifiedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTalentApply = `-- name: ListTalentApply :many
SELECT taap_user_entity_id, taap_entity_id, taap_intro, taap_scoring, taap_modified_date, taap_status FROM jobHire.talent_apply
ORDER BY taap_entity_id
`

func (q *Queries) ListTalentApply(ctx context.Context) ([]JobhireTalentApply, error) {
	rows, err := q.db.QueryContext(ctx, listTalentApply)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []JobhireTalentApply
	for rows.Next() {
		var i JobhireTalentApply
		if err := rows.Scan(
			&i.TaapUserEntityID,
			&i.TaapEntityID,
			&i.TaapIntro,
			&i.TaapScoring,
			&i.TaapModifiedDate,
			&i.TaapStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTalentApplyProgress = `-- name: ListTalentApplyProgress :many
SELECT tapr_id, taap_user_entity_id, taap_entity_id, tapr_modified_date, tapr_status, tapr_comment, tapr_progress_name FROM jobHire.talent_apply_progress
ORDER BY tapr_status
`

func (q *Queries) ListTalentApplyProgress(ctx context.Context) ([]JobhireTalentApplyProgress, error) {
	rows, err := q.db.QueryContext(ctx, listTalentApplyProgress)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []JobhireTalentApplyProgress
	for rows.Next() {
		var i JobhireTalentApplyProgress
		if err := rows.Scan(
			&i.TaprID,
			&i.TaapUserEntityID,
			&i.TaapEntityID,
			&i.TaprModifiedDate,
			&i.TaprStatus,
			&i.TaprComment,
			&i.TaprProgressName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT user_entity_id, user_name, user_password, user_first_name, user_last_name, user_birth_date, user_email_promotion, user_demographic, user_modified_date, user_photo, user_current_role FROM users.users
ORDER BY user_name
`

func (q *Queries) ListUsers(ctx context.Context) ([]UsersUser, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersUser
	for rows.Next() {
		var i UsersUser
		if err := rows.Scan(
			&i.UserEntityID,
			&i.UserName,
			&i.UserPassword,
			&i.UserFirstName,
			&i.UserLastName,
			&i.UserBirthDate,
			&i.UserEmailPromotion,
			&i.UserDemographic,
			&i.UserModifiedDate,
			&i.UserPhoto,
			&i.UserCurrentRole,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersPhoneNumberType = `-- name: ListUsersPhoneNumberType :many
SELECT ponty_code, ponty_modified_date FROM users.phone_number_type
ORDER BY ponty_modified_date
`

func (q *Queries) ListUsersPhoneNumberType(ctx context.Context) ([]UsersPhoneNumberType, error) {
	rows, err := q.db.QueryContext(ctx, listUsersPhoneNumberType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersPhoneNumberType
	for rows.Next() {
		var i UsersPhoneNumberType
		if err := rows.Scan(&i.PontyCode, &i.PontyModifiedDate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersRoles = `-- name: ListUsersRoles :many
SELECT usro_entity_id, usro_role_id, usro_modified_date FROM users.users_roles
ORDER BY usro_modified_date
`

func (q *Queries) ListUsersRoles(ctx context.Context) ([]UsersUsersRole, error) {
	rows, err := q.db.QueryContext(ctx, listUsersRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersUsersRole
	for rows.Next() {
		var i UsersUsersRole
		if err := rows.Scan(&i.UsroEntityID, &i.UsroRoleID, &i.UsroModifiedDate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listprogram_entity = `-- name: Listprogram_entity :many
SELECT prog_entity_id, prog_title, prog_headline, prog_type, prog_learning_type, prog_rating, prog_total_trainee, prog_modified_date, prog_image, prog_best_seller, prog_price, prog_language, prog_duration, prog_duration_type, prog_tag_skill, prog_city_id, prog_cate_id, prog_created_by, prog_status FROM curriculum.program_entity
ORDER BY prog_title
`

func (q *Queries) Listprogram_entity(ctx context.Context) ([]CurriculumProgramEntity, error) {
	rows, err := q.db.QueryContext(ctx, listprogram_entity)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CurriculumProgramEntity
	for rows.Next() {
		var i CurriculumProgramEntity
		if err := rows.Scan(
			&i.ProgEntityID,
			&i.ProgTitle,
			&i.ProgHeadline,
			&i.ProgType,
			&i.ProgLearningType,
			&i.ProgRating,
			&i.ProgTotalTrainee,
			&i.ProgModifiedDate,
			&i.ProgImage,
			&i.ProgBestSeller,
			&i.ProgPrice,
			&i.ProgLanguage,
			&i.ProgDuration,
			&i.ProgDurationType,
			&i.ProgTagSkill,
			&i.ProgCityID,
			&i.ProgCateID,
			&i.ProgCreatedBy,
			&i.ProgStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listprogram_entity_description = `-- name: Listprogram_entity_description :many
SELECT pred_prog_entity_id, pred_item_learning, pred_item_include, pred_requirement, pred_description, pred_target_level FROM curriculum.program_entity_description
ORDER BY pred_prog_entity_id
`

func (q *Queries) Listprogram_entity_description(ctx context.Context) ([]CurriculumProgramEntityDescription, error) {
	rows, err := q.db.QueryContext(ctx, listprogram_entity_description)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CurriculumProgramEntityDescription
	for rows.Next() {
		var i CurriculumProgramEntityDescription
		if err := rows.Scan(
			&i.PredProgEntityID,
			&i.PredItemLearning,
			&i.PredItemInclude,
			&i.PredRequirement,
			&i.PredDescription,
			&i.PredTargetLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listprogram_reviews = `-- name: Listprogram_reviews :many
SELECT prow_user_entity_id, prow_prog_entity_id, prow_review, prow_rating, prow_modified_date FROM curriculum.program_reviews
ORDER BY prow_rating
`

func (q *Queries) Listprogram_reviews(ctx context.Context) ([]CurriculumProgramReview, error) {
	rows, err := q.db.QueryContext(ctx, listprogram_reviews)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CurriculumProgramReview
	for rows.Next() {
		var i CurriculumProgramReview
		if err := rows.Scan(
			&i.ProwUserEntityID,
			&i.ProwProgEntityID,
			&i.ProwReview,
			&i.ProwRating,
			&i.ProwModifiedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listsection_detail = `-- name: Listsection_detail :many
SELECT secd_id, secd_title, secd_preview, secd_score, secd_note, secd_minute, secd_modified_date, secd_sect_id FROM curriculum.section_detail
ORDER BY secd_title
`

func (q *Queries) Listsection_detail(ctx context.Context) ([]CurriculumSectionDetail, error) {
	rows, err := q.db.QueryContext(ctx, listsection_detail)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CurriculumSectionDetail
	for rows.Next() {
		var i CurriculumSectionDetail
		if err := rows.Scan(
			&i.SecdID,
			&i.SecdTitle,
			&i.SecdPreview,
			&i.SecdScore,
			&i.SecdNote,
			&i.SecdMinute,
			&i.SecdModifiedDate,
			&i.SecdSectID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listsection_detail_material = `-- name: Listsection_detail_material :many
SELECT sedm_id, sedm_filename, sedm_filesize, sedm_filetype, sedm_filelink, sedm_modified_date, sedm_secd_id FROM curriculum.section_detail_material
ORDER BY sedm_filename
`

func (q *Queries) Listsection_detail_material(ctx context.Context) ([]CurriculumSectionDetailMaterial, error) {
	rows, err := q.db.QueryContext(ctx, listsection_detail_material)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CurriculumSectionDetailMaterial
	for rows.Next() {
		var i CurriculumSectionDetailMaterial
		if err := rows.Scan(
			&i.SedmID,
			&i.SedmFilename,
			&i.SedmFilesize,
			&i.SedmFiletype,
			&i.SedmFilelink,
			&i.SedmModifiedDate,
			&i.SedmSecdID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listsections = `-- name: Listsections :many
SELECT sect_id, sect_prog_entity_id, sect_title, sect_description, sect_total_section, sect_total_lecture, sect_total_minute, sect_modified_date FROM curriculum.sections
ORDER BY sect_title
`

func (q *Queries) Listsections(ctx context.Context) ([]CurriculumSection, error) {
	rows, err := q.db.QueryContext(ctx, listsections)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CurriculumSection
	for rows.Next() {
		var i CurriculumSection
		if err := rows.Scan(
			&i.SectID,
			&i.SectProgEntityID,
			&i.SectTitle,
			&i.SectDescription,
			&i.SectTotalSection,
			&i.SectTotalLecture,
			&i.SectTotalMinute,
			&i.SectModifiedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAddress = `-- name: UpdateAddress :exec
UPDATE users.users_address
  set etad_modified_date = $2,
  etad_entity_id = $3,
  etad_adty_id = $4
WHERE etad_addr_id = $1
`

type UpdateAddressParams struct {
	EtadAddrID       int32         `db:"etad_addr_id" json:"etadAddrId"`
	EtadModifiedDate sql.NullTime  `db:"etad_modified_date" json:"etadModifiedDate"`
	EtadEntityID     sql.NullInt32 `db:"etad_entity_id" json:"etadEntityId"`
	EtadAdtyID       sql.NullInt32 `db:"etad_adty_id" json:"etadAdtyId"`
}

func (q *Queries) UpdateAddress(ctx context.Context, arg UpdateAddressParams) error {
	_, err := q.db.ExecContext(ctx, updateAddress,
		arg.EtadAddrID,
		arg.EtadModifiedDate,
		arg.EtadEntityID,
		arg.EtadAdtyID,
	)
	return err
}

const updateBatch = `-- name: UpdateBatch :exec
UPDATE bootcamp.batch
SET batch_name = $2,
    batch_description = $3
WHERE batch_id = $1
`

type UpdateBatchParams struct {
	BatchID          int32          `db:"batch_id" json:"batchId"`
	BatchName        sql.NullString `db:"batch_name" json:"batchName"`
	BatchDescription sql.NullString `db:"batch_description" json:"batchDescription"`
}

func (q *Queries) UpdateBatch(ctx context.Context, arg UpdateBatchParams) error {
	_, err := q.db.ExecContext(ctx, updateBatch, arg.BatchID, arg.BatchName, arg.BatchDescription)
	return err
}

const updateBatchTrainee = `-- name: UpdateBatchTrainee :exec
UPDATE bootcamp.batch_trainee
SET batr_status = $2,
    batr_review = $3
WHERE batr_id = $1
`

type UpdateBatchTraineeParams struct {
	BatrID     int32          `db:"batr_id" json:"batrId"`
	BatrStatus sql.NullString `db:"batr_status" json:"batrStatus"`
	BatrReview sql.NullString `db:"batr_review" json:"batrReview"`
}

func (q *Queries) UpdateBatchTrainee(ctx context.Context, arg UpdateBatchTraineeParams) error {
	_, err := q.db.ExecContext(ctx, updateBatchTrainee, arg.BatrID, arg.BatrStatus, arg.BatrReview)
	return err
}

const updateBatchTraineeEvaluation = `-- name: UpdateBatchTraineeEvaluation :exec
UPDATE bootcamp.batch_trainee_evaluation
SET btev_type = $2,
    btev_header = $3
WHERE btev_id = $1
`

type UpdateBatchTraineeEvaluationParams struct {
	BtevID     int32          `db:"btev_id" json:"btevId"`
	BtevType   sql.NullString `db:"btev_type" json:"btevType"`
	BtevHeader sql.NullString `db:"btev_header" json:"btevHeader"`
}

func (q *Queries) UpdateBatchTraineeEvaluation(ctx context.Context, arg UpdateBatchTraineeEvaluationParams) error {
	_, err := q.db.ExecContext(ctx, updateBatchTraineeEvaluation, arg.BtevID, arg.BtevType, arg.BtevHeader)
	return err
}

const updateCart_item = `-- name: UpdateCart_item :exec
UPDATE sales.cart_items
  set cait_quantity = $2,
  cait_unit_price = $3
WHERE cait_id = $1
`

type UpdateCart_itemParams struct {
	CaitID        int32          `db:"cait_id" json:"caitId"`
	CaitQuantity  sql.NullInt32  `db:"cait_quantity" json:"caitQuantity"`
	CaitUnitPrice sql.NullString `db:"cait_unit_price" json:"caitUnitPrice"`
}

func (q *Queries) UpdateCart_item(ctx context.Context, arg UpdateCart_itemParams) error {
	_, err := q.db.ExecContext(ctx, updateCart_item, arg.CaitID, arg.CaitQuantity, arg.CaitUnitPrice)
	return err
}

const updateCategory = `-- name: UpdateCategory :exec
UPDATE jobHire.job_category
  set joca_name = $2,
  joca_modified_date = $3
WHERE joca_id = $1
`

type UpdateCategoryParams struct {
	JocaID           int32          `db:"joca_id" json:"jocaId"`
	JocaName         sql.NullString `db:"joca_name" json:"jocaName"`
	JocaModifiedDate sql.NullTime   `db:"joca_modified_date" json:"jocaModifiedDate"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) error {
	_, err := q.db.ExecContext(ctx, updateCategory, arg.JocaID, arg.JocaName, arg.JocaModifiedDate)
	return err
}

const updateClient = `-- name: UpdateClient :exec
UPDATE jobHire.client
  set clit_name = $2,
  clit_about = $3
WHERE clit_id = $1
`

type UpdateClientParams struct {
	ClitID    int32          `db:"clit_id" json:"clitId"`
	ClitName  sql.NullString `db:"clit_name" json:"clitName"`
	ClitAbout sql.NullString `db:"clit_about" json:"clitAbout"`
}

func (q *Queries) UpdateClient(ctx context.Context, arg UpdateClientParams) error {
	_, err := q.db.ExecContext(ctx, updateClient, arg.ClitID, arg.ClitName, arg.ClitAbout)
	return err
}

const updateClientContract = `-- name: UpdateClientContract :exec
UPDATE hr.employee_client_contract
  set ecco_start_date = $2,
  ecco_end_date = $3
WHERE ecco_id = $1
`

type UpdateClientContractParams struct {
	EccoID        int32        `db:"ecco_id" json:"eccoId"`
	EccoStartDate sql.NullTime `db:"ecco_start_date" json:"eccoStartDate"`
	EccoEndDate   sql.NullTime `db:"ecco_end_date" json:"eccoEndDate"`
}

func (q *Queries) UpdateClientContract(ctx context.Context, arg UpdateClientContractParams) error {
	_, err := q.db.ExecContext(ctx, updateClientContract, arg.EccoID, arg.EccoStartDate, arg.EccoEndDate)
	return err
}

const updateDepartment = `-- name: UpdateDepartment :exec
UPDATE hr.department
  set dept_name = $2
WHERE dept_id = $1
`

type UpdateDepartmentParams struct {
	DeptID   int32          `db:"dept_id" json:"deptId"`
	DeptName sql.NullString `db:"dept_name" json:"deptName"`
}

func (q *Queries) UpdateDepartment(ctx context.Context, arg UpdateDepartmentParams) error {
	_, err := q.db.ExecContext(ctx, updateDepartment, arg.DeptID, arg.DeptName)
	return err
}

const updateEducation = `-- name: UpdateEducation :exec
UPDATE users.users_education
  set usdu_entity_id = $2,
  usdu_school = $3,
  usdu_degree = $4,
  usdu_field_study = $5,
  usdu_graduate_year = $6,
  usdu_start_date = $7,
  usdu_end_date = $8,
  usdu_grade = $9,
  usdu_activities = $10,
  usdu_description = $11,
  usdu_modified_date = $12
WHERE usdu_id = $1
`

type UpdateEducationParams struct {
	UsduID           int32          `db:"usdu_id" json:"usduId"`
	UsduEntityID     int32          `db:"usdu_entity_id" json:"usduEntityId"`
	UsduSchool       sql.NullString `db:"usdu_school" json:"usduSchool"`
	UsduDegree       sql.NullString `db:"usdu_degree" json:"usduDegree"`
	UsduFieldStudy   sql.NullString `db:"usdu_field_study" json:"usduFieldStudy"`
	UsduGraduateYear sql.NullString `db:"usdu_graduate_year" json:"usduGraduateYear"`
	UsduStartDate    sql.NullTime   `db:"usdu_start_date" json:"usduStartDate"`
	UsduEndDate      sql.NullTime   `db:"usdu_end_date" json:"usduEndDate"`
	UsduGrade        sql.NullString `db:"usdu_grade" json:"usduGrade"`
	UsduActivities   sql.NullString `db:"usdu_activities" json:"usduActivities"`
	UsduDescription  sql.NullString `db:"usdu_description" json:"usduDescription"`
	UsduModifiedDate sql.NullTime   `db:"usdu_modified_date" json:"usduModifiedDate"`
}

func (q *Queries) UpdateEducation(ctx context.Context, arg UpdateEducationParams) error {
	_, err := q.db.ExecContext(ctx, updateEducation,
		arg.UsduID,
		arg.UsduEntityID,
		arg.UsduSchool,
		arg.UsduDegree,
		arg.UsduFieldStudy,
		arg.UsduGraduateYear,
		arg.UsduStartDate,
		arg.UsduEndDate,
		arg.UsduGrade,
		arg.UsduActivities,
		arg.UsduDescription,
		arg.UsduModifiedDate,
	)
	return err
}

const updateEmail = `-- name: UpdateEmail :exec
UPDATE users.users_email
  set pmail_entity_id = $2,
  pmail_address   = $3,
  pmail_modified_date = $4
WHERE pmail_id = $1
`

type UpdateEmailParams struct {
	PmailID           int32          `db:"pmail_id" json:"pmailId"`
	PmailEntityID     int32          `db:"pmail_entity_id" json:"pmailEntityId"`
	PmailAddress      sql.NullString `db:"pmail_address" json:"pmailAddress"`
	PmailModifiedDate sql.NullTime   `db:"pmail_modified_date" json:"pmailModifiedDate"`
}

func (q *Queries) UpdateEmail(ctx context.Context, arg UpdateEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateEmail,
		arg.PmailID,
		arg.PmailEntityID,
		arg.PmailAddress,
		arg.PmailModifiedDate,
	)
	return err
}

const updateEmployeeDepartmentHistory = `-- name: UpdateEmployeeDepartmentHistory :exec
UPDATE hr.employee_department_history
  set edhi_start_date = $2,
  edhi_end_date = $3
WHERE edhi_id = $1
`

type UpdateEmployeeDepartmentHistoryParams struct {
	EdhiID        int32        `db:"edhi_id" json:"edhiId"`
	EdhiStartDate sql.NullTime `db:"edhi_start_date" json:"edhiStartDate"`
	EdhiEndDate   sql.NullTime `db:"edhi_end_date" json:"edhiEndDate"`
}

func (q *Queries) UpdateEmployeeDepartmentHistory(ctx context.Context, arg UpdateEmployeeDepartmentHistoryParams) error {
	_, err := q.db.ExecContext(ctx, updateEmployeeDepartmentHistory, arg.EdhiID, arg.EdhiStartDate, arg.EdhiEndDate)
	return err
}

const updateEmployeeRange = `-- name: UpdateEmployeeRange :exec
UPDATE jobHire.employee_range
  set emra_range_min = $2,
  emra_range_max = $3
WHERE emra_id = $1
`

type UpdateEmployeeRangeParams struct {
	EmraID       int32         `db:"emra_id" json:"emraId"`
	EmraRangeMin sql.NullInt32 `db:"emra_range_min" json:"emraRangeMin"`
	EmraRangeMax sql.NullInt32 `db:"emra_range_max" json:"emraRangeMax"`
}

func (q *Queries) UpdateEmployeeRange(ctx context.Context, arg UpdateEmployeeRangeParams) error {
	_, err := q.db.ExecContext(ctx, updateEmployeeRange, arg.EmraID, arg.EmraRangeMin, arg.EmraRangeMax)
	return err
}

const updateExperience = `-- name: UpdateExperience :exec
UPDATE users.users_experiences
  set 
  usex_entity_id = $2,
  usex_title      = $3,
  usex_profile_headline    = $4,
  usex_employment_type     = $5,
  usex_company_name        = $6,
  usex_is_current          = $7,
  usex_start_date         = $8,
  usex_end_date           = $9,
  usex_industry            = $10,
  usex_description       = $11,
  usex_experience_type     = $12,
  usex_city_id             = $13
WHERE usex_id = $1
`

type UpdateExperienceParams struct {
	UsexID              int32          `db:"usex_id" json:"usexId"`
	UsexEntityID        int32          `db:"usex_entity_id" json:"usexEntityId"`
	UsexTitle           sql.NullString `db:"usex_title" json:"usexTitle"`
	UsexProfileHeadline sql.NullString `db:"usex_profile_headline" json:"usexProfileHeadline"`
	UsexEmploymentType  sql.NullString `db:"usex_employment_type" json:"usexEmploymentType"`
	UsexCompanyName     sql.NullString `db:"usex_company_name" json:"usexCompanyName"`
	UsexIsCurrent       sql.NullString `db:"usex_is_current" json:"usexIsCurrent"`
	UsexStartDate       sql.NullTime   `db:"usex_start_date" json:"usexStartDate"`
	UsexEndDate         sql.NullTime   `db:"usex_end_date" json:"usexEndDate"`
	UsexIndustry        sql.NullString `db:"usex_industry" json:"usexIndustry"`
	UsexDescription     sql.NullString `db:"usex_description" json:"usexDescription"`
	UsexExperienceType  sql.NullString `db:"usex_experience_type" json:"usexExperienceType"`
	UsexCityID          sql.NullInt32  `db:"usex_city_id" json:"usexCityId"`
}

func (q *Queries) UpdateExperience(ctx context.Context, arg UpdateExperienceParams) error {
	_, err := q.db.ExecContext(ctx, updateExperience,
		arg.UsexID,
		arg.UsexEntityID,
		arg.UsexTitle,
		arg.UsexProfileHeadline,
		arg.UsexEmploymentType,
		arg.UsexCompanyName,
		arg.UsexIsCurrent,
		arg.UsexStartDate,
		arg.UsexEndDate,
		arg.UsexIndustry,
		arg.UsexDescription,
		arg.UsexExperienceType,
		arg.UsexCityID,
	)
	return err
}

const updateExperienceSkill = `-- name: UpdateExperienceSkill :exec
UPDATE users.users_experiences_skill
  set uesk_uski_id = $2
WHERE uesk_usex_id = $1
`

type UpdateExperienceSkillParams struct {
	UeskUsexID int32 `db:"uesk_usex_id" json:"ueskUsexId"`
	UeskUskiID int32 `db:"uesk_uski_id" json:"ueskUskiId"`
}

func (q *Queries) UpdateExperienceSkill(ctx context.Context, arg UpdateExperienceSkillParams) error {
	_, err := q.db.ExecContext(ctx, updateExperienceSkill, arg.UeskUsexID, arg.UeskUskiID)
	return err
}

const updateInstructorProgram = `-- name: UpdateInstructorProgram :exec
UPDATE bootcamp.instructor_programs
SET inpro_entity_id = $2,
    inpro_modified_date = $3
WHERE batch_id = $1
`

type UpdateInstructorProgramParams struct {
	BatchID           int32        `db:"batch_id" json:"batchId"`
	InproEntityID     int32        `db:"inpro_entity_id" json:"inproEntityId"`
	InproModifiedDate sql.NullTime `db:"inpro_modified_date" json:"inproModifiedDate"`
}

func (q *Queries) UpdateInstructorProgram(ctx context.Context, arg UpdateInstructorProgramParams) error {
	_, err := q.db.ExecContext(ctx, updateInstructorProgram, arg.BatchID, arg.InproEntityID, arg.InproModifiedDate)
	return err
}

const updateJobPost = `-- name: UpdateJobPost :exec
UPDATE jobHire.job_post
  set jopo_title = $2
WHERE jopo_entity_id = $1
`

type UpdateJobPostParams struct {
	JopoEntityID int32          `db:"jopo_entity_id" json:"jopoEntityId"`
	JopoTitle    sql.NullString `db:"jopo_title" json:"jopoTitle"`
}

func (q *Queries) UpdateJobPost(ctx context.Context, arg UpdateJobPostParams) error {
	_, err := q.db.ExecContext(ctx, updateJobPost, arg.JopoEntityID, arg.JopoTitle)
	return err
}

const updateJobPostDesc = `-- name: UpdateJobPostDesc :exec
UPDATE jobHire.job_post_desc
  set jopo_description = $2,
  jopo_responsibility = $3
WHERE jopo_entity_id = $1
`

type UpdateJobPostDescParams struct {
	JopoEntityID       int32                 `db:"jopo_entity_id" json:"jopoEntityId"`
	JopoDescription    sql.NullString `db:"jopo_description" json:"jopoDescription"`
	JopoResponsibility sql.NullString `db:"jopo_responsibility" json:"jopoResponsibility"`
}

func (q *Queries) UpdateJobPostDesc(ctx context.Context, arg UpdateJobPostDescParams) error {
	_, err := q.db.ExecContext(ctx, updateJobPostDesc, arg.JopoEntityID, arg.JopoDescription, arg.JopoResponsibility)
	return err
}

const updateLicense = `-- name: UpdateLicense :exec
UPDATE users.users_license
  set usli_license_code = $2,
  usli_modified_date = $3,
  usli_status = $4,
  usli_entity_id = $5
WHERE usli_id = $1
`

type UpdateLicenseParams struct {
	UsliID           int32          `db:"usli_id" json:"usliId"`
	UsliLicenseCode  sql.NullString `db:"usli_license_code" json:"usliLicenseCode"`
	UsliModifiedDate sql.NullTime   `db:"usli_modified_date" json:"usliModifiedDate"`
	UsliStatus       sql.NullString `db:"usli_status" json:"usliStatus"`
	UsliEntityID     int32          `db:"usli_entity_id" json:"usliEntityId"`
}

func (q *Queries) UpdateLicense(ctx context.Context, arg UpdateLicenseParams) error {
	_, err := q.db.ExecContext(ctx, updateLicense,
		arg.UsliID,
		arg.UsliLicenseCode,
		arg.UsliModifiedDate,
		arg.UsliStatus,
		arg.UsliEntityID,
	)
	return err
}

const updateMedia = `-- name: UpdateMedia :exec
UPDATE users.users_media
  set usme_entity_id = $2,
  usme_file_link = $3,
  usme_filename = $4,
  usme_filesize = $5,
  usme_filetype = $6,
  usme_note = $7,
  usme_modified_date = $8
WHERE usme_id = $1
`

type UpdateMediaParams struct {
	UsmeID           int32          `db:"usme_id" json:"usmeId"`
	UsmeEntityID     int32          `db:"usme_entity_id" json:"usmeEntityId"`
	UsmeFileLink     sql.NullString `db:"usme_file_link" json:"usmeFileLink"`
	UsmeFilename     sql.NullString `db:"usme_filename" json:"usmeFilename"`
	UsmeFilesize     sql.NullInt32  `db:"usme_filesize" json:"usmeFilesize"`
	UsmeFiletype     sql.NullString `db:"usme_filetype" json:"usmeFiletype"`
	UsmeNote         sql.NullString `db:"usme_note" json:"usmeNote"`
	UsmeModifiedDate sql.NullTime   `db:"usme_modified_date" json:"usmeModifiedDate"`
}

func (q *Queries) UpdateMedia(ctx context.Context, arg UpdateMediaParams) error {
	_, err := q.db.ExecContext(ctx, updateMedia,
		arg.UsmeID,
		arg.UsmeEntityID,
		arg.UsmeFileLink,
		arg.UsmeFilename,
		arg.UsmeFilesize,
		arg.UsmeFiletype,
		arg.UsmeNote,
		arg.UsmeModifiedDate,
	)
	return err
}

const updatePayHistory = `-- name: UpdatePayHistory :exec
UPDATE hr.employee_pay_history
  set ephi_rate_salary = $2,
  ephi_pay_frequence = $3
WHERE ephi_entity_id = $1
`

type UpdatePayHistoryParams struct {
	EphiEntityID     int32         `db:"ephi_entity_id" json:"ephiEntityId"`
	EphiRateSalary   sql.NullInt32 `db:"ephi_rate_salary" json:"ephiRateSalary"`
	EphiPayFrequence sql.NullInt16 `db:"ephi_pay_frequence" json:"ephiPayFrequence"`
}

func (q *Queries) UpdatePayHistory(ctx context.Context, arg UpdatePayHistoryParams) error {
	_, err := q.db.ExecContext(ctx, updatePayHistory, arg.EphiEntityID, arg.EphiRateSalary, arg.EphiPayFrequence)
	return err
}

const updatePaymentFintech = `-- name: UpdatePaymentFintech :exec

UPDATE payment.fintech
set
    fint_code = $2,
    fint_name = $3
WHERE fint_entity_id = $1
`

type UpdatePaymentFintechParams struct {
	FintEntityID int32          `db:"fint_entity_id" json:"fintEntityId"`
	FintCode     sql.NullString `db:"fint_code" json:"fintCode"`
	FintName     sql.NullString `db:"fint_name" json:"fintName"`
}

func (q *Queries) UpdatePaymentFintech(ctx context.Context, arg UpdatePaymentFintechParams) error {
	_, err := q.db.ExecContext(ctx, updatePaymentFintech, arg.FintEntityID, arg.FintCode, arg.FintName)
	return err
}

const updatePaymentTransaction_payment = `-- name: UpdatePaymentTransaction_payment :exec

UPDATE
    payment.transaction_payment
set
    trpa_code_number = $2,
    trpa_order_number = $3,
    trpa_debit = $4,
    trpa_credit = $5,
    trpa_type = $6,
    trpa_note = $7,
    trpa_modified_date = $8,
    trpa_source_id = $9,
    trpa_target_id = $10,
    trpa_user_entity_id = $11
WHERE trpa_id = $1
`

type UpdatePaymentTransaction_paymentParams struct {
	TrpaID           int32          `db:"trpa_id" json:"trpaId"`
	TrpaCodeNumber   sql.NullString `db:"trpa_code_number" json:"trpaCodeNumber"`
	TrpaOrderNumber  sql.NullString `db:"trpa_order_number" json:"trpaOrderNumber"`
	TrpaDebit        sql.NullString `db:"trpa_debit" json:"trpaDebit"`
	TrpaCredit       sql.NullString `db:"trpa_credit" json:"trpaCredit"`
	TrpaType         sql.NullString `db:"trpa_type" json:"trpaType"`
	TrpaNote         sql.NullString `db:"trpa_note" json:"trpaNote"`
	TrpaModifiedDate sql.NullTime   `db:"trpa_modified_date" json:"trpaModifiedDate"`
	TrpaSourceID     string         `db:"trpa_source_id" json:"trpaSourceId"`
	TrpaTargetID     string         `db:"trpa_target_id" json:"trpaTargetId"`
	TrpaUserEntityID sql.NullInt32  `db:"trpa_user_entity_id" json:"trpaUserEntityId"`
}

func (q *Queries) UpdatePaymentTransaction_payment(ctx context.Context, arg UpdatePaymentTransaction_paymentParams) error {
	_, err := q.db.ExecContext(ctx, updatePaymentTransaction_payment,
		arg.TrpaID,
		arg.TrpaCodeNumber,
		arg.TrpaOrderNumber,
		arg.TrpaDebit,
		arg.TrpaCredit,
		arg.TrpaType,
		arg.TrpaNote,
		arg.TrpaModifiedDate,
		arg.TrpaSourceID,
		arg.TrpaTargetID,
		arg.TrpaUserEntityID,
	)
	return err
}

const updatePaymentUsers_account = `-- name: UpdatePaymentUsers_account :exec

UPDATE payment.users_account
set
    usac_user_entity_id = $2,
    usac_account_number = $3,
    usac_saldo = $4,
    usac_type = $5,
    usac_start_date = $6,
    usac_end_date = $7,
    usac_modified_date = $8,
    usac_status = $9
WHERE usac_bank_entity_id = $1
`

type UpdatePaymentUsers_accountParams struct {
	UsacBankEntityID  int32          `db:"usac_bank_entity_id" json:"usacBankEntityId"`
	UsacUserEntityID  int32          `db:"usac_user_entity_id" json:"usacUserEntityId"`
	UsacAccountNumber sql.NullString `db:"usac_account_number" json:"usacAccountNumber"`
	UsacSaldo         sql.NullString `db:"usac_saldo" json:"usacSaldo"`
	UsacType          sql.NullString `db:"usac_type" json:"usacType"`
	UsacStartDate     sql.NullTime   `db:"usac_start_date" json:"usacStartDate"`
	UsacEndDate       sql.NullTime   `db:"usac_end_date" json:"usacEndDate"`
	UsacModifiedDate  sql.NullTime   `db:"usac_modified_date" json:"usacModifiedDate"`
	UsacStatus        sql.NullString `db:"usac_status" json:"usacStatus"`
}

func (q *Queries) UpdatePaymentUsers_account(ctx context.Context, arg UpdatePaymentUsers_accountParams) error {
	_, err := q.db.ExecContext(ctx, updatePaymentUsers_account,
		arg.UsacBankEntityID,
		arg.UsacUserEntityID,
		arg.UsacAccountNumber,
		arg.UsacSaldo,
		arg.UsacType,
		arg.UsacStartDate,
		arg.UsacEndDate,
		arg.UsacModifiedDate,
		arg.UsacStatus,
	)
	return err
}

const updatePhones = `-- name: UpdatePhones :exec
UPDATE users.users_phones
  set uspo_number = $2,
  uspo_modified_date = $3,
  uspo_ponty_code=$4
WHERE uspo_entity_id = $1
`

type UpdatePhonesParams struct {
	UspoEntityID     int32          `db:"uspo_entity_id" json:"uspoEntityId"`
	UspoNumber       string         `db:"uspo_number" json:"uspoNumber"`
	UspoModifiedDate sql.NullTime   `db:"uspo_modified_date" json:"uspoModifiedDate"`
	UspoPontyCode    sql.NullString `db:"uspo_ponty_code" json:"uspoPontyCode"`
}

func (q *Queries) UpdatePhones(ctx context.Context, arg UpdatePhonesParams) error {
	_, err := q.db.ExecContext(ctx, updatePhones,
		arg.UspoEntityID,
		arg.UspoNumber,
		arg.UspoModifiedDate,
		arg.UspoPontyCode,
	)
	return err
}

const updateProgramApply = `-- name: UpdateProgramApply :exec
UPDATE bootcamp.program_apply
SET prap_prog_entity_id = $2,
    prap_modified_date = $3
WHERE prap_user_entity_id = $1
`

type UpdateProgramApplyParams struct {
	PrapUserEntityID int32        `db:"prap_user_entity_id" json:"prapUserEntityId"`
	PrapProgEntityID int32        `db:"prap_prog_entity_id" json:"prapProgEntityId"`
	PrapModifiedDate sql.NullTime `db:"prap_modified_date" json:"prapModifiedDate"`
}

func (q *Queries) UpdateProgramApply(ctx context.Context, arg UpdateProgramApplyParams) error {
	_, err := q.db.ExecContext(ctx, updateProgramApply, arg.PrapUserEntityID, arg.PrapProgEntityID, arg.PrapModifiedDate)
	return err
}

const updateProgramApplyProgress = `-- name: UpdateProgramApplyProgress :exec
UPDATE bootcamp.program_apply_progress
SET parog_user_entity_id = $2,
    parog_modified_date = $3
WHERE parog_id = $1
`

type UpdateProgramApplyProgressParams struct {
	ParogID           int32        `db:"parog_id" json:"parogId"`
	ParogUserEntityID int32        `db:"parog_user_entity_id" json:"parogUserEntityId"`
	ParogModifiedDate sql.NullTime `db:"parog_modified_date" json:"parogModifiedDate"`
}

func (q *Queries) UpdateProgramApplyProgress(ctx context.Context, arg UpdateProgramApplyProgressParams) error {
	_, err := q.db.ExecContext(ctx, updateProgramApplyProgress, arg.ParogID, arg.ParogUserEntityID, arg.ParogModifiedDate)
	return err
}

const updateRoles = `-- name: UpdateRoles :exec
UPDATE users.roles
  set role_name = $2,
  role_type=$3,
  role_modified_date=$4
WHERE role_id = $1
`

type UpdateRolesParams struct {
	RoleID           int32          `db:"role_id" json:"roleId"`
	RoleName         sql.NullString `db:"role_name" json:"roleName"`
	RoleType         sql.NullString `db:"role_type" json:"roleType"`
	RoleModifiedDate sql.NullTime   `db:"role_modified_date" json:"roleModifiedDate"`
}

func (q *Queries) UpdateRoles(ctx context.Context, arg UpdateRolesParams) error {
	_, err := q.db.ExecContext(ctx, updateRoles,
		arg.RoleID,
		arg.RoleName,
		arg.RoleType,
		arg.RoleModifiedDate,
	)
	return err
}

const updateSales_order_detail = `-- name: UpdateSales_order_detail :exec
UPDATE sales.sales_order_detail
  set sode_qty = $2,
  sode_unit_price = $3
WHERE sode_id = $1
`

type UpdateSales_order_detailParams struct {
	SodeID        int32          `db:"sode_id" json:"sodeId"`
	SodeQty       sql.NullInt32  `db:"sode_qty" json:"sodeQty"`
	SodeUnitPrice sql.NullString `db:"sode_unit_price" json:"sodeUnitPrice"`
}

func (q *Queries) UpdateSales_order_detail(ctx context.Context, arg UpdateSales_order_detailParams) error {
	_, err := q.db.ExecContext(ctx, updateSales_order_detail, arg.SodeID, arg.SodeQty, arg.SodeUnitPrice)
	return err
}

const updateSales_order_header = `-- name: UpdateSales_order_header :exec
UPDATE sales.sales_order_header
  set sohe_order_date = $2,
  sohe_due_date = $3
WHERE sohe_id = $1
`

type UpdateSales_order_headerParams struct {
	SoheID        int32        `db:"sohe_id" json:"soheId"`
	SoheOrderDate sql.NullTime `db:"sohe_order_date" json:"soheOrderDate"`
	SoheDueDate   sql.NullTime `db:"sohe_due_date" json:"soheDueDate"`
}

func (q *Queries) UpdateSales_order_header(ctx context.Context, arg UpdateSales_order_headerParams) error {
	_, err := q.db.ExecContext(ctx, updateSales_order_header, arg.SoheID, arg.SoheOrderDate, arg.SoheDueDate)
	return err
}

const updateSkill = `-- name: UpdateSkill :exec
UPDATE users.users_skill
  set uski_entity_id = $2,
  uski_modified_date = $3,
  uski_skty_name= $4
WHERE uski_id = $1
`

type UpdateSkillParams struct {
	UskiID           int32          `db:"uski_id" json:"uskiId"`
	UskiEntityID     int32          `db:"uski_entity_id" json:"uskiEntityId"`
	UskiModifiedDate sql.NullTime   `db:"uski_modified_date" json:"uskiModifiedDate"`
	UskiSktyName     sql.NullString `db:"uski_skty_name" json:"uskiSktyName"`
}

func (q *Queries) UpdateSkill(ctx context.Context, arg UpdateSkillParams) error {
	_, err := q.db.ExecContext(ctx, updateSkill,
		arg.UskiID,
		arg.UskiEntityID,
		arg.UskiModifiedDate,
		arg.UskiSktyName,
	)
	return err
}

const updateSpecial_offer = `-- name: UpdateSpecial_offer :exec
UPDATE sales.special_offer
  set spof_description = $2,
  spof_discount = $3
WHERE spof_id = $1
`

type UpdateSpecial_offerParams struct {
	SpofID          int32          `db:"spof_id" json:"spofId"`
	SpofDescription sql.NullString `db:"spof_description" json:"spofDescription"`
	SpofDiscount    sql.NullInt32  `db:"spof_discount" json:"spofDiscount"`
}

func (q *Queries) UpdateSpecial_offer(ctx context.Context, arg UpdateSpecial_offerParams) error {
	_, err := q.db.ExecContext(ctx, updateSpecial_offer, arg.SpofID, arg.SpofDescription, arg.SpofDiscount)
	return err
}

const updateSpecial_offer_programs = `-- name: UpdateSpecial_offer_programs :exec
UPDATE sales.special_offer_programs
  set soco_spof_id = $2,
  soco_prog_entity_id = $3
WHERE soco_id = $1
`

type UpdateSpecial_offer_programsParams struct {
	SocoID           int32 `db:"soco_id" json:"socoId"`
	SocoSpofID       int32 `db:"soco_spof_id" json:"socoSpofId"`
	SocoProgEntityID int32 `db:"soco_prog_entity_id" json:"socoProgEntityId"`
}

func (q *Queries) UpdateSpecial_offer_programs(ctx context.Context, arg UpdateSpecial_offer_programsParams) error {
	_, err := q.db.ExecContext(ctx, updateSpecial_offer_programs, arg.SocoID, arg.SocoSpofID, arg.SocoProgEntityID)
	return err
}

const updateTalentApply = `-- name: UpdateTalentApply :exec
UPDATE jobHire.talent_apply
  set taap_intro = $2,
  taap_scoring = $3
WHERE taap_user_entity_id = $1
`

type UpdateTalentApplyParams struct {
	TaapUserEntityID int32          `db:"taap_user_entity_id" json:"taapUserEntityId"`
	TaapIntro        sql.NullString `db:"taap_intro" json:"taapIntro"`
	TaapScoring      sql.NullInt32  `db:"taap_scoring" json:"taapScoring"`
}

func (q *Queries) UpdateTalentApply(ctx context.Context, arg UpdateTalentApplyParams) error {
	_, err := q.db.ExecContext(ctx, updateTalentApply, arg.TaapUserEntityID, arg.TaapIntro, arg.TaapScoring)
	return err
}

const updateTalentApplyProgress = `-- name: UpdateTalentApplyProgress :exec
UPDATE jobHire.talent_apply_progress
  set tapr_comment = $2,
  tapr_progress_name = $3
WHERE tapr_id = $1
`

type UpdateTalentApplyProgressParams struct {
	TaprID           int32          `db:"tapr_id" json:"taprId"`
	TaprComment      sql.NullString `db:"tapr_comment" json:"taprComment"`
	TaprProgressName sql.NullString `db:"tapr_progress_name" json:"taprProgressName"`
}

func (q *Queries) UpdateTalentApplyProgress(ctx context.Context, arg UpdateTalentApplyProgressParams) error {
	_, err := q.db.ExecContext(ctx, updateTalentApplyProgress, arg.TaprID, arg.TaprComment, arg.TaprProgressName)
	return err
}

const updateUsers = `-- name: UpdateUsers :exec
UPDATE users.users
  set user_name = $2,
  user_password=$3,
  user_first_name= $4,
  user_last_name =$5,
  user_birth_date=$6,
  user_email_promotion=$7,
  user_demographic=$8,
  user_modified_date=$9,
  user_photo=$10,
  user_current_role=$11
WHERE user_entity_id = $1
`

type UpdateUsersParams struct {
	UserEntityID       int32          `db:"user_entity_id" json:"userEntityId"`
	UserName           sql.NullString `db:"user_name" json:"userName"`
	UserPassword       sql.NullString `db:"user_password" json:"userPassword"`
	UserFirstName      sql.NullString `db:"user_first_name" json:"userFirstName"`
	UserLastName       sql.NullString `db:"user_last_name" json:"userLastName"`
	UserBirthDate      sql.NullTime   `db:"user_birth_date" json:"userBirthDate"`
	UserEmailPromotion sql.NullInt32  `db:"user_email_promotion" json:"userEmailPromotion"`
	UserDemographic    sql.NullString `db:"user_demographic" json:"userDemographic"`
	UserModifiedDate   sql.NullTime   `db:"user_modified_date" json:"userModifiedDate"`
	UserPhoto          sql.NullString `db:"user_photo" json:"userPhoto"`
	UserCurrentRole    sql.NullInt32  `db:"user_current_role" json:"userCurrentRole"`
}

func (q *Queries) UpdateUsers(ctx context.Context, arg UpdateUsersParams) error {
	_, err := q.db.ExecContext(ctx, updateUsers,
		arg.UserEntityID,
		arg.UserName,
		arg.UserPassword,
		arg.UserFirstName,
		arg.UserLastName,
		arg.UserBirthDate,
		arg.UserEmailPromotion,
		arg.UserDemographic,
		arg.UserModifiedDate,
		arg.UserPhoto,
		arg.UserCurrentRole,
	)
	return err
}

const updateUsersPhoneNumberType = `-- name: UpdateUsersPhoneNumberType :exec
UPDATE users.phone_number_type
  set ponty_modified_date = $2
WHERE ponty_code = $1
`

type UpdateUsersPhoneNumberTypeParams struct {
	PontyCode         string       `db:"ponty_code" json:"pontyCode"`
	PontyModifiedDate sql.NullTime `db:"ponty_modified_date" json:"pontyModifiedDate"`
}

func (q *Queries) UpdateUsersPhoneNumberType(ctx context.Context, arg UpdateUsersPhoneNumberTypeParams) error {
	_, err := q.db.ExecContext(ctx, updateUsersPhoneNumberType, arg.PontyCode, arg.PontyModifiedDate)
	return err
}

const updateUsersRoles = `-- name: UpdateUsersRoles :exec
UPDATE users.users_roles
  set usro_role_id = $2,
  usro_modified_date=$3
WHERE usro_entity_id = $1
`

type UpdateUsersRolesParams struct {
	UsroEntityID     int32        `db:"usro_entity_id" json:"usroEntityId"`
	UsroRoleID       int32        `db:"usro_role_id" json:"usroRoleId"`
	UsroModifiedDate sql.NullTime `db:"usro_modified_date" json:"usroModifiedDate"`
}

func (q *Queries) UpdateUsersRoles(ctx context.Context, arg UpdateUsersRolesParams) error {
	_, err := q.db.ExecContext(ctx, updateUsersRoles, arg.UsroEntityID, arg.UsroRoleID, arg.UsroModifiedDate)
	return err
}

const updateprogram_entity = `-- name: Updateprogram_entity :exec
UPDATE curriculum.program_entity
  set prog_title = $2,
  prog_headline = $3
WHERE prog_entity_id = $1
`

type Updateprogram_entityParams struct {
	ProgEntityID int32          `db:"prog_entity_id" json:"progEntityId"`
	ProgTitle    sql.NullString `db:"prog_title" json:"progTitle"`
	ProgHeadline sql.NullString `db:"prog_headline" json:"progHeadline"`
}

func (q *Queries) Updateprogram_entity(ctx context.Context, arg Updateprogram_entityParams) error {
	_, err := q.db.ExecContext(ctx, updateprogram_entity, arg.ProgEntityID, arg.ProgTitle, arg.ProgHeadline)
	return err
}

const updateprogram_entity_description = `-- name: Updateprogram_entity_description :exec
UPDATE curriculum.program_entity_description
  set pred_item_learning= $2,
  pred_item_include = $3
WHERE pred_prog_entity_id= $1
`

type Updateprogram_entity_descriptionParams struct {
	PredProgEntityID int32                 `db:"pred_prog_entity_id" json:"predProgEntityId"`
	PredItemLearning sql.NullString `db:"pred_item_learning" json:"predItemLearning"`
	PredItemInclude  sql.NullString `db:"pred_item_include" json:"predItemInclude"`
}

func (q *Queries) Updateprogram_entity_description(ctx context.Context, arg Updateprogram_entity_descriptionParams) error {
	_, err := q.db.ExecContext(ctx, updateprogram_entity_description, arg.PredProgEntityID, arg.PredItemLearning, arg.PredItemInclude)
	return err
}

const updateprogram_reviews = `-- name: Updateprogram_reviews :exec
UPDATE curriculum.program_reviews
  set prow_review = $2,
  prow_rating = $3
WHERE prow_user_entity_id = $1
`

type Updateprogram_reviewsParams struct {
	ProwUserEntityID int32          `db:"prow_user_entity_id" json:"prowUserEntityId"`
	ProwReview       sql.NullString `db:"prow_review" json:"prowReview"`
	ProwRating       sql.NullInt32  `db:"prow_rating" json:"prowRating"`
}

func (q *Queries) Updateprogram_reviews(ctx context.Context, arg Updateprogram_reviewsParams) error {
	_, err := q.db.ExecContext(ctx, updateprogram_reviews, arg.ProwUserEntityID, arg.ProwReview, arg.ProwRating)
	return err
}

const updatesection_detail = `-- name: Updatesection_detail :exec
UPDATE curriculum.section_detail
  set secd_title = $2,
  secd_preview = $3
WHERE secd_id = $1
`

type Updatesection_detailParams struct {
	SecdID      int32          `db:"secd_id" json:"secdId"`
	SecdTitle   sql.NullString `db:"secd_title" json:"secdTitle"`
	SecdPreview sql.NullString `db:"secd_preview" json:"secdPreview"`
}

func (q *Queries) Updatesection_detail(ctx context.Context, arg Updatesection_detailParams) error {
	_, err := q.db.ExecContext(ctx, updatesection_detail, arg.SecdID, arg.SecdTitle, arg.SecdPreview)
	return err
}

const updatesection_detail_material = `-- name: Updatesection_detail_material :exec
UPDATE curriculum.section_detail_material
  set sedm_filename = $2,
  sedm_filesize = $3
WHERE sedm_id = $1
`

type Updatesection_detail_materialParams struct {
	SedmID       int32          `db:"sedm_id" json:"sedmId"`
	SedmFilename sql.NullString `db:"sedm_filename" json:"sedmFilename"`
	SedmFilesize sql.NullInt32  `db:"sedm_filesize" json:"sedmFilesize"`
}

func (q *Queries) Updatesection_detail_material(ctx context.Context, arg Updatesection_detail_materialParams) error {
	_, err := q.db.ExecContext(ctx, updatesection_detail_material, arg.SedmID, arg.SedmFilename, arg.SedmFilesize)
	return err
}

const updatesections = `-- name: Updatesections :exec
UPDATE curriculum.sections
  set sect_title = $2,
  sect_description = $3
WHERE sect_id = $1
`

type UpdatesectionsParams struct {
	SectID          int32          `db:"sect_id" json:"sectId"`
	SectTitle       sql.NullString `db:"sect_title" json:"sectTitle"`
	SectDescription sql.NullString `db:"sect_description" json:"sectDescription"`
}

func (q *Queries) Updatesections(ctx context.Context, arg UpdatesectionsParams) error {
	_, err := q.db.ExecContext(ctx, updatesections, arg.SectID, arg.SectTitle, arg.SectDescription)
	return err
}
